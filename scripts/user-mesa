#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2022 Thomas “illwieckz“ Debesse

# You may need to install:
# clang python3-setuptools python3-mako cmake meson doxygen libexpat1-dev libxml2-dev xsltproc xmlto libvulkan-dev spirv-tools libelf-dev byacc bison flex libxcb-glx0-dev libxcb-shm0-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-dri3-dev libxcb-present-dev libxshmfence-dev libvdpau-dev libxvmc-dev libva-dev glslang-tools

# Exit in case of failure.
set -e
set -o pipefail

# Error on undefined variable.
set -u

project_name='Mesa'
required_file='/etc/OpenCL/vendors/mesa.icd'

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir="${script_dir}/workspace"
workspace_dir="${workspace_parent_dir}/${script_name}"
install_dir="${workspace_dir}/install"

known_feature_list='opencl,rusticl,vulkan,opengl,gles,nine,va,vdpau,xa,xvmc,egl'
default_feature_list='opencl,rusticl,vulkan'
feature_opencl='false'
feature_vulkan='false'
feature_opengl='false'
feature_gles='false'
feature_nine='false'
feature_va='false'
feature_vdpau='false'
feature_xa='false'
feature_xvmc='false'
feature_egl='false'

packages=(
	# package name
	#	directory name
	#	repository url
	#	branch name
	#	build slug
	'Meson'
		'meson'
		'https://github.com/mesonbuild/meson.git'
		'-'
		'generic_python'
	'LLVM project'
		'llvm-project'
		'https://github.com/llvm/llvm-project.git'
		'-'
		'-'
	'LLVM'
		'llvm-project/llvm'
		'-'
		'-'
		'llvm'
	'Clang'
		'llvm-project/clang'
		'-'
		'-'
		'clang'
	'SPIRV Headers'
		'SPIRV-Headers'
		'https://github.com/KhronosGroup/SPIRV-Headers.git'
		'-'
		'generic_cmake'
	'SPIRV LLVM Translator'
		'SPIRV-LLVM-Translator'
		'https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git'
		'-'
		'spirv_llvm_translator'
	'libclc'
		'llvm-project/libclc'
		'-'
		'-'
		'generic_cmake'
	'Wayland'
		'wayland'
		'https://gitlab.freedesktop.org/wayland/wayland.git'
		'-'
		'generic_meson'
	'Wayland protocols'
		'wayland-protocols'
		'https://gitlab.freedesktop.org/wayland/wayland-protocols.git'
		'-'
		'generic_meson'
	'libpciaccess'
		'libpciaccess'
		'https://gitlab.freedesktop.org/xorg/lib/libpciaccess.git'
		'-'
		'generic_meson'
	'DRM'
		'drm'
		'https://gitlab.freedesktop.org/mesa/drm.git'
		'-'
		'generic_meson'
	'Mesa'
		'mesa'
		'https://gitlab.freedesktop.org/mesa/mesa.git'
		'-'
		'mesa'
)

_find_vulkan_icd_files () {
	if [ -d "${install_dir}/share/vulkan/icd.d" ]
	then
		find "${install_dir}/share/vulkan/icd.d" \
			-type f \
			-name '*.json' \
			| tr '\n' ':'
	fi
}

_set_env () {
	local machine="$(uname -m)"

	export PATH="${install_dir}/bin:${PATH:-}"

	export LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LIBRARY_PATH:-}"
	export LIBRARY_PATH="${install_dir}/lib:${LIBRARY_PATH:-}"

	export LD_LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LD_LIBRARY_PATH:-}"
	export LD_LIBRARY_PATH="${install_dir}/lib:${LD_LIBRARY_PATH:-}"

	export PKG_CONFIG_PATH="${install_dir}/lib/${machine}-linux-gnu/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/share/pkgconfig:${PKG_CONFIG_PATH:-}"

	export PYTHONUSERBASE="${install_dir}"

	export CMAKE_PREFIX_PATH="${install_dir}:${CMAKE_PREFIX_PATH:-}"

	export OPENCL_VENDOR_PATH="${install_dir}/etc/OpenCL/vendors"

	export VK_ICD_FILENAMES="$(_find_vulkan_icd_files):${VK_ICD_FILENAMES:-}"

	# Doesn't work:
	# export VK_DRIVERS_PATH="${install_dir}/share/vulkan/icd.d:${VK_DRIVERS_PATH:-}"
}

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

usable_job_count=1
do_pull='true'

_prefix () {
	sed -e 's/^/'"${1}"': /'
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_pull () {
	if "${do_pull}"
	then
		git pull || true
	fi
}

_fetch () {
	local i=0
	while [ "${i}" -lt "${#packages[@]}" ]
	do
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		local repository="${packages[${i}]}"
		i="$((${i} + 1))"
		local branch="${packages[${i}]}"
		i="$((${i} + 1))"
		# slug
		i="$((${i} + 1))"

		if [ "${repository}" = '-' ]
		then
			continue
		fi

		_cd

		if ! [ -d "${directory}" ]
		then
			{
				echo "$(pwd)/${directory}"
				if [ "${branch}" = '-' ]
				then
					git clone "${repository}"
				else
					git clone --branch "${branch}" "${repository}"
				fi
			} | _prefix "Clone ${name}"
		fi

		{
			cd "${directory}"
			pwd

			_pull
		} | _prefix "Pull ${name}"
	done
}

_meson_setup () {
	if ! [ -f 'build/compile_commands.json' ]
	then
		meson setup \
			'build' \
			-D'prefix'="${install_dir}" \
			"${@}"
	else
		meson setup \
			--reconfigure \
			'build' \
			-D'prefix'="${install_dir}" \
			"${@}"
	fi
}

_cmake_setup () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}" \
		-G Ninja \
		"${@}"

	echo '*' > 'build/.gitignore'
}

_cmake_target () {
	cmake \
		--build 'build' \
		--parallel "${usable_job_count}" \
		-- "${@}"
}

_cmake_compile_install () {
	_cmake_target

	_cmake_target install
}

_meson_compile_install () {
	meson compile \
		-C 'build' \
		-j "${usable_job_count}"

	meson install \
		-C 'build'
}

_build_generic_python () {
	python3 'setup.py' build

	# PYTHONUSERBASE already takes care of it:
	# --prefix="${install_dir}"
	python3 'setup.py' install --user
}

_build_generic_cmake () {
	_cmake_setup

	_cmake_compile_install
}

_build_generic_meson () {
	_meson_setup

	_meson_compile_install
}

_build_llvm () {
	# Explicit build type is now mandatory,
	# See https://github.com/llvm/llvm-project/commit/350bdf9227cebceb7b7a283f90f504555bf6c496
	# RTTI is disabled by default by LLVM, but Clover requires it to be enabled:
	# > ERROR: Problem encountered: The Clover OpenCL state tracker requires rtti
	_cmake_setup \
		-D'CMAKE_BUILD_TYPE'='Debug' \
		-D'LLVM_BUILD_LLVM_DYLIB'='ON' \
		-D'LLVM_LINK_LLVM_DYLIB'='ON' \
		-D'LLVM_ENABLE_ASSERTIONS'='ON' \
		-D'LLVM_ENABLE_RTTI'='ON'

	_cmake_compile_install
}

_build_clang () {
	# Explicit build type is now mandatory,
	# See https://github.com/llvm/llvm-project/commit/350bdf9227cebceb7b7a283f90f504555bf6c496
	# It is currently built only for building llvm-spirv.
	_cmake_setup \
		-D'CMAKE_BUILD_TYPE'='Debug' \
		-D'LLVM_LINK_LLVM_DYLIB'='ON'

	_cmake_compile_install
}

_build_spirv_llvm_translator () {
	_cmake_setup \
		-D'CMAKE_CXX_COMPILER'="${install_dir}/bin/clang++" \
		-D'LLVM_LINK_LLVM_DYLIB'='ON' \
		-D'BUILD_SHARED_LIBS'='OFF' \
		-D'LLVM_BUILD_TOOLS'='ON' \
		-D'LLVM_BUILD_TESTS'='OFF' \
		-D'LLVM_SPIRV_INCLUDE_TESTS'='OFF'

	_cmake_compile_install

	_cmake_target 'llvm-spirv'

	cp -av \
		'build/tools/llvm-spirv/llvm-spirv' \
		"${install_dir}/bin/llvm-spirv"
}

_build_mesa () {
	mesa_egl='disabled'
	mesa_gbm='disabled'
	mesa_glx='disabled'
	mesa_glx_direct='false'
	mesa_gles1='disabled'
	mesa_gles2='disabled'
	mesa_glvnd='false'
	mesa_opengl='false'
	mesa_gallium_nine='false'
	mesa_gallium_opencl='disabled'
	mesa_gallium_rusticl='disabled'
	mesa_gallium_va='disabled'
	mesa_gallium_vdpau='disabled'
	mesa_gallium_xa='disabled'
	mesa_gallium_xvmc='disabled'
	mesa_opencl_native='false'
	mesa_opencl_spirv='false'
	mesa_gallium_drivers=''
	mesa_vulkan_drivers=''

	# Used by opengl, gles, and nine.
	gallium_graphics_drivers='swrast,radeonsi,r300,r600,nouveau,i915,iris,zink,crocus'
	# Used by vulkan.
	gallium_vulkan_drivers='swrast'
	# Used by opencl.
	gallium_opencl_drivers='radeonsi,r600,nouveau,iris'
	gallium_rusticl_drivers='swrast,nouveau,iris'

	vulkan_drivers='swrast,amd,intel'

	if "${feature_opencl}"
	then
		mesa_gallium_drivers+=",${gallium_opencl_drivers}"
		mesa_gallium_opencl='icd'
		mesa_opencl_native='true'
		mesa_opencl_spirv='true'
	fi

	if "${feature_rusticl}"
	then
		mesa_gallium_drivers+=",${gallium_rusticl_drivers}"
		mesa_gallium_rusticl='true'
		mesa_opencl_native='true'
		mesa_opencl_spirv='true'
	fi

	if "${feature_vulkan}"
	then
		# swrast vulkan requires swrast gallium
		mesa_gallium_drivers+=",${gallium_vulkan_drivers}"
		mesa_vulkan_drivers="${vulkan_drivers}"
	fi

	if "${feature_opengl}"
	then
		mesa_gallium_drivers+=",${gallium_graphics_drivers}"
		mesa_glvnd='true'
		mesa_opengl='true'
		mesa_glx='dri'
		mesa_glx_direct='true'
	fi

	if "${feature_gles}"
	then
		mesa_gallium_drivers+=",${gallium_graphics_drivers}"
		mesa_gles1='enabled'
		mesa_gles2='enabled'
	fi

	if "${feature_nine}"
	then
		mesa_gallium_drivers+=",${gallium_graphics_drivers}"
		mesa_gallium_nine='true'
	fi

	if "${feature_va}"
	then
		mesa_gallium_va='enabled'
	fi

	if "${feature_vdpau}"
	then
		mesa_gallium_vdpau='enabled'
	fi

	if "${feature_xa}"
	then
		mesa_gallium_xa='enabled'
	fi

	if "${feature_xvmc}"
	then
		mesa_gallium_xvmc='enabled'
	fi

	if "${feature_egl}"
	then
		mesa_egl='enabled'
		mesa_gbm='enabled'
		# EGL requires shared-glapi
		mesa_opengl='true'
	fi

	mesa_gallium_drivers="$(echo "${mesa_gallium_drivers//,/$'\n'}" | sort -u | grep -v -E '^$' || true)"
	mesa_gallium_drivers="${mesa_gallium_drivers//$'\n'/,}"
	mesa_gallium_drivers="${mesa_gallium_drivers:-[]}"

	mesa_vulkan_drivers="$(echo "${mesa_vulkan_drivers//,/$'\n'}" | sort -u | grep -v -E '^$' || true)"
	mesa_vulkan_drivers="${mesa_vulkan_drivers//$'\n'/,}"
	mesa_vulkan_drivers="${mesa_vulkan_drivers:-[]}"

	set -x
	# See also:
	#  gallium-drivers: virgl
	#  vulkan-drivers: virtio-experimental
	#  vulkan-beta (Vulkan beta extensions)
	#  intel-clc (Intel ray queries)
	#  egl-native-platform
	#  static-libclc
	#  shader-cache
	# Clover requires RTTI to be enabled.
	_meson_setup \
		-D'cpp_rtti'='true' \
		-D'rust_std'='2021' \
		-D'dri-drivers'='[]' \
		-D'dri3'='enabled' \
		-D'egl'="${mesa_egl}" \
		-D'gbm'="${mesa_gbm}" \
		-D'glx'="${mesa_glx}" \
		-D'glx-direct'="${mesa_glx_direct}" \
		-D'gallium-drivers'="${mesa_gallium_drivers}" \
		-D'gallium-nine'="${mesa_gallium_nine}" \
		-D'gallium-omx'='disabled' \
		-D'gallium-opencl'="${mesa_gallium_opencl}" \
		-D'gallium-rusticl'="${mesa_gallium_rusticl}" \
		-D'gallium-va'="${mesa_gallium_va}" \
		-D'gallium-vdpau'="${mesa_gallium_vdpau}" \
		-D'gallium-xa'="${mesa_gallium_xa}" \
		-D'gallium-xvmc'="${mesa_gallium_xvmc}" \
		-D'opencl-native'="${mesa_opencl_native}" \
		-D'opencl-spirv'="${mesa_opencl_spirv}" \
		-D'opengl'="${mesa_opengl}" \
		-D'glvnd'="${mesa_glvnd}" \
		-D'gles1'="${mesa_gles1}" \
		-D'gles2'="${mesa_gles2}" \
		-D'vulkan-drivers'="${mesa_vulkan_drivers}" \
		-D'platforms'='auto' \
		-D'llvm'='enabled' \
		-D'lmsensors'='disabled' \
		-D'shared-llvm'='enabled'

	_meson_compile_install
}

_build () {
	local job_count="$(nproc)"
	local do_force='false'

	local feature_list=''
	local enable_list=''
	local disable_list=''

	while ! [ -z "${1:-}" ]
	do
		case "${1:-}" in
			'--no-pull')
				do_pull='false'
				shift
				;;
			'--force')
				do_force='true'
				shift
				;;
			'-j'|'--jobs')
				shift
				if [ -z "${1:-}" ]
				then
					_error 'Missing job count.'
				fi

				job_count="${1}"
				shift
				;;
			'-j'*)
				job_count="${1:2}"
				shift
				;;
			'--features='*)
				feature_list="${1:11}"
				feature_list="${feature_list//,/ }"
				shift
				;;
			'--enable='*)
				enable_list="${1:9}"
				enable_list="${enable_list//,/ }"
				shift
				;;
			'--disable='*)
				disable_list="${1:10}"
				disable_list="${disable_list//,/ }"
				shift
				;;
			'-h'|'--help'|'')
				_help
				;;
			'-'*|'--'*)
				_error 'Unknown build option.'
				;;
			*)
				_error 'Unknown build parameter.'
				;;
		esac
	done

	local llvm_job_count="${job_count}"
	local mem_available_k="$(grep '^MemAvailable:' /proc/meminfo | awk '{ print $2 }')"
	local mem_available_g="$((${mem_available_k} / 1024 / 1024))"
	local mem_per_core="$((${mem_available_g} / ${job_count}))"
	local min_llvm_mem_per_core='8'

	if [ "${mem_per_core}" -lt "${min_llvm_mem_per_core}" ]
	then
		if ! "${do_force}"
		then
			llvm_job_count="$((${mem_available_g} / ${min_llvm_mem_per_core}))"

			cat >&2 <<-EOF
			WARNING: The computer has less than ${min_llvm_mem_per_core}G of available memory per CPU core.
			LLVM will be compiled will ${llvm_job_count} jobs instead of ${job_count} to prevent the computer
			to run out of memory when linking LLVM.

			Use --force to force using ${job_count} jobs when compiling LLVM.
			EOF
			sleep 5s
		fi
	fi

	if [ -z "${feature_list}" ]
	then
		feature_list="${default_feature_list}"
	elif [ "${feature_list}" = 'all' ]
	then
		feature_list="${known_feature_list}"
	fi

	local feature_mode
	local feature_name
	local feature_is_unknown
	local feature_value

	local iteratable_known_feature_list="${known_feature_list//,/ }"
	local iteratable_feature_list="${feature_list//,/ }"

	for feature_name in ${iteratable_feature_list}
	do
		eval "feature_${feature_name}='true'"
	done

	for feature_mode in 'enable' 'disable'
	do
		if [ "${feature_mode}" = 'enable' ]
		then
			feature_value='true'
		else
			feature_value='false'
		fi

		for feature_name in $(eval 'echo ${'"${feature_mode}"'_list}')
		do
			feature_is_unknown='true'
			for known_feature in ${iteratable_known_feature_list}
			do
				if [ "${feature_name}" = "${known_feature}" ]
				then
					eval "feature_${feature_name}='${feature_value}'"
					feature_is_unknown='false'
				fi
			done

			if "${feature_is_unknown}"
			then
				_error "Unknown feature: ${feature_name}"
			fi
		done
	done

	local enabled_feature_list=''
	local disabled_feature_list=''
	for feature_name in ${iteratable_known_feature_list}
	do
		if eval '${feature_'"${feature_name}"'}'
		then
			enabled_feature_list+="${enabled_feature_list:+,}${feature_name}"
		else
			disabled_feature_list+="${disabled_feature_list:+,}${feature_name}"
		fi
	done

	printf 'Building features: %s\n' "${enabled_feature_list}"
	printf 'Not building features: %s\n' "${disabled_feature_list}"

	_set_env

	_fetch

	local i=0
	while [ "${i}" -lt "${#packages[@]}" ]
	do
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		# repository
		i="$((${i} + 1))"
		# branch
		i="$((${i} + 1))"
		local slug="${packages[${i}]}"
		i="$((${i} + 1))"

		if [ "${slug}" = '-' ]
		then
			continue
		fi

		if [ "${name}" = 'LLVM' ]
		then
			usable_job_count="${llvm_job_count}"
		else
			usable_job_count="${job_count}"
		fi

		{
			_cd

			cd "${directory}"
			pwd

			echo "${slug}"
			"_build_${slug}"
		} | _prefix "Build ${name}"
	done
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		cd "${workspace_dir}"

		local i=0
		while [ "${i}" -lt "${#packages[@]}" ]
		do
			local name="${packages[${i}]}"
			i="$((${i} + 1))"
			local directory="${packages[${i}]}"
			i="$((${i} + 1))"
			local repository="${packages[${i}]}"
			i="$((${i} + 1))"
			# branch
			i="$((${i} + 1))"
			# slug
			i="$((${i} + 1))"

			if [ "${repository}" = '-' ]
			then
				continue
			fi

			{
				_cd

				echo "$(pwd)/${directory}"
				rm -force --recursive --verbose "${directory}"
			} | _prefix "Clean ${name}"
		done

		cd "${script_dir}"

		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_shell () {
	_set_env

	_cd

	pwd | _prefix "Shell ${script_name}"

	"${SHELL}"
}

_run () {
	if [ "${1:-}" = '--force' ]
	then
		shift
	elif ! [ -f "${install_dir}${required_file}" ]
	then
		_error "${project_name} is not built."
	fi

	_set_env

	if [ -z "${1:-}" ]
	then
		_error 'Missing command.'
	fi
	
	"${@}"

	exit
}

tab=$'\t'

_mention () {
	cat >&2 <<-EOF
	This tool is provided by the I love compute! initiative.

	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	cat <<-EOF
	${script_name}: Download and build ${project_name} to run OpenCL or Vulkan on supported devices.

	Usage: ${script_name} [OPTION] [ACTION] [OPTION] [COMMAND]

	Option:
	${tab}-h, --help
	${tab}${tab}Print this help.

	Actions:
	${tab}build
	${tab}${tab}Download and build ${project_name}.
	${tab}clean
	${tab}${tab}Clean-up downloaded and built files for ${project_name}.
	${tab}shell
	${tab}${tab}Open an interactive shell in the ${project_name} workspace.
	${tab}run
	${tab}${tab}Run command with ${project_name}.

	Build options:
	${tab}--no-pull
	${tab}${tab}Do not pull updates from source repositories when building.
	${tab}-jN,--jobs N
	${tab}${tab}Build with N parallel jobs, default: Availables core count.
	${tab}--force
	${tab}${tab}Force using as much parallel jobs even when there may not be enough memory.
	${tab}--features=[FEATURES]
	${tab}${tab}Build those features, comma separated list, default: ${default_feature_list}.
	${tab}${tab}Special name: all, build all known features.
	${tab}--enable=[FEATURES]
	${tab}${tab}Add features to feature build list, comma separated list.
	${tab}--disable=[FEATURES]
	${tab}${tab}Remove features from feature build list, comma separated list.

	Run options:
	${tab}--force
	${tab}${tab}Run the command even if ${project_name} isn't installed yet.

	Features:
	${tab}${known_feature_list}.

	Commands:
	${tab}Anything you want, for example clinfo or vulkaninfo.

	Examples:
	${tab}${script_name} build

	${tab}${script_name} build --enable=opengl,nine,va

	${tab}${script_name} run clinfo --list

	${tab}${script_name} run vulkaninfo --summary

	${tab}AMD_VULKAN_ICD=RADV ${script_name} run vulkaninfo --summary

	EOF

	_mention

	exit
}

case "${1:-}" in
	'build'|'clean'|'shell'|'run')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

"_${action}" "${@}"

printf '\n'

_mention
