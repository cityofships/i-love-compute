#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2021 Thomas “illwieckz“ Debesse

# You may need to install cmake, meson, python3-mako and doxygen.

# Exit in case of failure.
set -e
set -o pipefail

# Error on undefined variable.
set -u

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir="${script_dir}/workspace"
workspace_dir="${workspace_parent_dir}/${script_name}"
install_dir="${workspace_dir}/install"

packages=(
	# package name
	#	directory name
	#	repository url
	#	build slug
	'Meson'
		'meson'
		'https://github.com/mesonbuild/meson.git'
		'meson'
	'LLVM project'
		'llvm-project'
		'https://github.com/llvm/llvm-project.git'
		'-'
	'LLVM'
		'llvm-project/llvm'
		'-'
		'llvm'
	'Clang'
		'llvm-project/clang'
		'-'
		'clang'
	'SPIRV Headers'
		'SPIRV-Headers'
		'https://github.com/KhronosGroup/SPIRV-Headers.git'
		'spirv_headers'
	'SPIRV LLVM Translator'
		'SPIRV-LLVM-Translator'
		'https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git'
		'spirv_llvm_translator'
	'libclc'
		'llvm-project/libclc'
		'-'
		'libclc'
	'Wayland'
		'wayland'
		'https://gitlab.freedesktop.org/wayland/wayland.git'
		'wayland'
	'Wayland protocols'
		'wayland-protocols'
		'https://gitlab.freedesktop.org/wayland/wayland-protocols.git'
		'wayland_protocols'
	'libpciaccess'
		'libpciaccess'
		'https://gitlab.freedesktop.org/xorg/lib/libpciaccess.git'
		'libpciaccess'
	'DRM'
		'drm'
		'https://gitlab.freedesktop.org/mesa/drm.git'
		'drm'
	'Mesa'
		'mesa'
		'https://gitlab.freedesktop.org/mesa/mesa.git'
		'mesa'
)

_find_vulkan_icd_files () {
	if [ -d "${install_dir}/share/vulkan/icd.d" ]
	then
		find "${install_dir}/share/vulkan/icd.d" \
			-type f \
			-name '*.json' \
			| tr '\n' ':'
	fi
}

_set_env () {
	local machine="$(uname -m)"

	export CC='clang'
	export CXX='clang++'

	export PATH="${install_dir}/bin:${PATH:-}"

	export LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LIBRARY_PATH:-}"
	export LIBRARY_PATH="${install_dir}/lib:${LIBRARY_PATH:-}"

	export LD_LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LD_LIBRARY_PATH:-}"
	export LD_LIBRARY_PATH="${install_dir}/lib:${LD_LIBRARY_PATH:-}"

	export PKG_CONFIG_PATH="${install_dir}/lib/${machine}-linux-gnu/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/share/pkgconfig:${PKG_CONFIG_PATH:-}"

	export PYTHONUSERBASE="${install_dir}"

	export CMAKE_PREFIX_PATH="${install_dir}:${CMAKE_PREFIX_PATH:-}"

	export OPENCL_VENDOR_PATH="${install_dir}/etc/OpenCL/vendors"

	export VK_ICD_FILENAMES="$(_find_vulkan_icd_files):${VK_ICD_FILENAMES:-}"

	# Doesn't work:
	# export VK_DRIVERS_PATH="${install_dir}/share/vulkan/icd.d:${VK_DRIVERS_PATH:-}"
}

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

job_count="$(nproc)"
do_pull='true'

_prefix () {
	sed -e 's/^/'"${1}"': /'
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_pull () {
	if "${do_pull}"
	then
		git pull
	fi
}

_fetch () {
	local i=0
	while [ ${i} -lt "${#packages[@]}" ]
	do
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		local repository="${packages[${i}]}"
		i="$((${i} + 1))"
		# slug
		i="$((${i} + 1))"

		if [ "${repository}" = '-' ]
		then
			continue
		fi

		_cd

		if [ -d "${directory}" ]
		then
			{
				cd "${directory}"
				pwd

				_pull
			} | _prefix "pull ${name}"
		else
			{
				echo "$(pwd)/${directory}"
				git clone "${repository}"
			} | _prefix "clone ${name}"
		fi
	done
}

_meson_setup () {
	if ! [ -f 'build/compile_commands.json' ]
	then
		meson setup \
			"${@}"
	else
		meson setup \
			--reconfigure \
			"${@}"
	fi
}

_build_meson () {
	python3 'setup.py' build

	python3 'setup.py' install --user #--prefix="${install_dir}"
}

_build_llvm () {
	cmake \
		-S'.' \
		-B'build' \
		-D'LLVM_BUILD_LLVM_DYLIB'='ON' \
		-D'LLVM_ENABLE_RTTI'='ON' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}"

	cmake \
		--build 'build' \
		--parallel "${job_count}"

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'install'
}

_build_clang () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}"

	cmake \
		--build 'build' \
		--parallel "${job_count}"

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'install'
}

_build_spirv_headers () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}"

	cmake \
		--build 'build' \
		--parallel "${job_count}"

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'install'
}

_build_spirv_llvm_translator () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}"

	cmake \
		--build 'build' \
		--parallel "${job_count}"

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'llvm-spirv'

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'install'

	cp -av \
		'build/tools/llvm-spirv/llvm-spirv' \
		"${install_dir}/bin/llvm-spirv"
}

_build_libclc () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}"

	cmake \
		--build 'build' \
		--parallel "${job_count}"

	cmake \
		--build 'build' \
		--parallel "${job_count}" \
		-- 'install'
}

_build_wayland () {
	_meson_setup \
		'build' \
		-D'prefix'="${install_dir}"

	meson compile \
		-C 'build' \
		-j "${job_count}"

	meson install \
		-C 'build'
}

_build_wayland_protocols () {
	_meson_setup \
		'build' \
		-D'prefix'="${install_dir}"

	meson compile \
		-C 'build' \
		-j "${job_count}"

	meson install \
		-C 'build'
}

_build_libpciaccess () {
	_meson_setup \
		'build' \
		-D'prefix'="${install_dir}"

	meson compile \
		-C 'build'

	meson install \
		-C 'build'
}

_build_drm () {
	_meson_setup \
		'build' \
		-D'prefix'="${install_dir}"

	meson compile \
		-C 'build' \
		-j "${job_count}"

	meson install \
		-C 'build'
}

_build_mesa () {
	_meson_setup \
		'build' \
		-D'prefix'="${install_dir}" \
		-D'dri-drivers'='[]' \
		-D'dri3'='enabled' \
		-D'egl'='disabled' \
		-D'gallium-drivers'='radeonsi,r600,nouveau,swrast' \
		-D'gallium-nine'='false' \
		-D'gallium-opencl'='icd' \
		-D'gallium-va'='disabled' \
		-D'gallium-vdpau'='disabled' \
		-D'gallium-xa'='disabled' \
		-D'gallium-xvmc'='disabled' \
		-D'gbm'='disabled' \
		-D'gles1'='disabled' \
		-D'gles2'='disabled' \
		-D'glx'='disabled' \
		-D'llvm'='enabled' \
		-D'lmsensors'='disabled' \
		-D'opengl'='false' \
		-D'vulkan-drivers'='amd,intel,swrast' \
		-D'shared-llvm'='enabled'

	meson compile \
		-C 'build' \
		-j "${job_count}"

	meson install \
		-C 'build'
}

_test () {
	clinfo --list
}

_build () {
	while ! [ -z "${1:-}" ]
	do
		case "${1:-}" in
			'--no-pull')
				do_pull='false'
				shift
				;;
			'-j'|'--jobs')
				shift
				if [ -z "${1:-}" ]
				then
					_error 'Missing job count.'
				fi

				job_count="${1}"
				shift
				;;
			'-j'*)
				job_count="${1:2}"
				shift
				;;
			'-h'|'--help'|'')
				_help
				;;
			'-'*|'--'*)
				_error 'Unknown build option.'
				;;
			*)
				_error 'Unknown build parameter.'
				;;
		esac
	done

	local mem_available_k="$(grep '^MemAvailable:' /proc/meminfo | awk '{ print $2 }')"
	local mem_available_g="$((${mem_available_k} / 1024 / 1024))"
	local mem_per_core="$((${mem_available_g} / ${job_count}))"
	local min_mem_per_core='8'

	if [ "${mem_per_core}" -lt "${min_mem_per_core}" ]
	then
		cat >&2 <<-EOF
		WARNING: The computer has less than ${min_mem_per_core}G of available memory per CPU core.
		You may run out of memory when linking LLVM.

		If you are not sure about what you are doing,
		abort with Control+C.

		The build with continue in 10s.
		EOF
		sleep 10s
	fi

	_set_env

	_cd

	_fetch

	local i=0
	while [ ${i} -lt "${#packages[@]}" ]
	do 
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		# repository
		i="$((${i} + 1))"
		local slug="${packages[${i}]}"
		i="$((${i} + 1))"

		if [ "${slug}" = '-' ]
		then
			continue
		fi

		{
			_cd

			cd "${directory}"
			pwd


			"_build_${slug}"
		} | _prefix "build ${name}"
	done
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		cd "${workspace_dir}"

		local i=0
		while [ ${i} -lt "${#packages[@]}" ]
		do 
			local name="${packages[${i}]}"
			i="$((${i} + 1))"
			local directory="${packages[${i}]}"
			i="$((${i} + 1))"
			local repository="${packages[${i}]}"
			i="$((${i} + 1))"
			# slug
			i="$((${i} + 1))"

			if [ "${repository}" = '-' ]
			then
				continue
			fi

			{
				_cd

				echo "$(pwd)/${directory}"
				rm -force --recursive --verbose "${directory}"
			} | _prefix "clean ${name}"
		done

		cd "${script_dir}"

		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_run () {
	if [ "${1:-}" = '--force' ]
	then
		shift
	elif ! [ -f "${install_dir}/etc/OpenCL/vendors/mesa.icd" ]
	then
		_error 'Clover is not built.'
	fi

	_set_env

	"${@}"

	exit
}

tab=$'\t'

_mention () {
	cat >&2 <<-EOF
	This tool is provided by the I love compute! initiative.

	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	cat <<-EOF
	${script_name}: Download and build Mesa to run OpenCL or Vulkan on supported devices.

	Usage: ${script_name} [OPTION] [ACTION] [OPTION] [COMMAND]

	Option:
	${tab}-h, --help
	${tab}${tab}Print this help.

	Actions:
	${tab}build
	${tab}${tab}Download and build Mesa.
	${tab}clean
	${tab}${tab}Clean-up downloaded and built files for Mesa.
	${tab}run
	${tab}${tab}Run command with Mesa.

	Build options:
	${tab}--no-pull
	${tab}${tab}Do not pull updates from source repositories when building.
	${tab}-j N,--jobs N
	${tab}${tab}Build with N parallel jobs (default: Availables core count).

	Run options:
	${tab}--force
	${tab}${tab}Run the command even if Clover isn't installed yet.

	Commands:
	${tab}Anything you want, for example clinfo or vulkaninfo.

	Examples:
	${tab}${script_name} build

	${tab}${script_name} run clinfo --list

	${tab}${script_name} run vulkaninfo --summary

	${tab}${script_name} run --force bash

	${tab}AMD_VULKAN_ICD=RADV ${script_name} run vulkaninfo --summary

	EOF

	_mention

	exit
}

case "${1:-}" in
	'build'|'clean'|'run')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

"_${action}" "${@}"

printf '\n'

_mention
