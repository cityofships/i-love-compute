#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2022 Thomas “illwieckz“ Debesse

# You may need to install:
# cmake, meson, python3-mako and doxygen.
# TODO: rustup component add rustfm

# Exit in case of failure.
set -e
set -o pipefail

# Error on undefined variable.
set -u

project_name='rusticl'
required_file='/etc/OpenCL/vendors/rusticl.icd'

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir="${script_dir}/workspace"
workspace_dir="${workspace_parent_dir}/${script_name}"
install_dir="${workspace_dir}/install"

packages=(
	# package name
	#	directory name
	#	repository url
	#	branch name
	#	build slug
	'Meson'
		'meson'
		'https://github.com/mesonbuild/meson.git'
		'-'
		'generic_python'
	'LLVM project'
		'llvm-project'
		'https://github.com/llvm/llvm-project.git'
		'-'
		'-'
	'LLVM'
		'llvm-project/llvm'
		'-'
		'-'
		'llvm'
	'Clang'
		'llvm-project/clang'
		'-'
		'-'
		'clang'
	# For debugging with libasan, this may be needed
	# if the compiled CLang is also used for building
	# other things than llvm-spirv.
#	'compiler-rt'
#		'llvm-project/compiler-rt'
#		'-'
#		'-'
#		'generic_cmake'
	'SPIRV Headers'
		'SPIRV-Headers'
		'https://github.com/KhronosGroup/SPIRV-Headers.git'
		'-'
		'generic_cmake'
	'SPIRV Tools'
		'SPIRV-Tools'
		'https://github.com/KhronosGroup/SPIRV-Tools.git'
		'-'
		'spirv_tools'
	'SPIRV LLVM Translator'
		'SPIRV-LLVM-Translator'
		'https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git'
		'-'
		'spirv_llvm_translator'
	'libclc'
		'llvm-project/libclc'
		'-'
		'-'
		'generic_cmake'
	'Wayland'
		'wayland'
		'https://gitlab.freedesktop.org/wayland/wayland.git'
		'-'
		'generic_meson'
	'Wayland protocols'
		'wayland-protocols'
		'https://gitlab.freedesktop.org/wayland/wayland-protocols.git'
		'-'
		'generic_meson'
	'libpciaccess'
		'libpciaccess'
		'https://gitlab.freedesktop.org/xorg/lib/libpciaccess.git'
		'-'
		'generic_meson'
	'DRM'
		'drm'
		'https://gitlab.freedesktop.org/mesa/drm.git'
		'-'
		'generic_meson'
	'Mesa'
		'mesa'
		'https://gitlab.freedesktop.org/karolherbst/mesa.git'
		'rusticl/wip'
		'mesa'
)

_set_env () {
	local machine="$(uname -m)"

	export PATH="${install_dir}/bin:${PATH:-}"

	export LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LIBRARY_PATH:-}"
	export LIBRARY_PATH="${install_dir}/lib:${LIBRARY_PATH:-}"

	export LD_LIBRARY_PATH="${install_dir}/lib/${machine}-linux-gnu:${LD_LIBRARY_PATH:-}"
	export LD_LIBRARY_PATH="${install_dir}/lib:${LD_LIBRARY_PATH:-}"

	export PKG_CONFIG_PATH="${install_dir}/lib/${machine}-linux-gnu/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
	export PKG_CONFIG_PATH="${install_dir}/share/pkgconfig:${PKG_CONFIG_PATH:-}"

	export PYTHONUSERBASE="${install_dir}"

	export CMAKE_PREFIX_PATH="${install_dir}:${CMAKE_PREFIX_PATH:-}"

	export CARGO_INSTALL_ROOT="${install_dir}"

	export OPENCL_VENDOR_PATH="${install_dir}/etc/OpenCL/vendors"
}

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

usable_job_count=1
do_pull='true'

_prefix () {
	sed -e 's/^/'"${1}"': /'
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_pull () {
	if "${do_pull}"
	then
		if [ "$(basename "$(pwd)")" = 'mesa' -a "$(git rev-parse --abbrev-ref HEAD)" = 'rusticl/wip' ]
		then
			# The merge request is a work-in-progress draft, force push may happen.
			git reset --hard '0f437e49c60f007abf3605cb4438db372f1503a0'
		fi

		git pull || true
	fi
}

_fetch () {
	local i=0
	while [ "${i}" -lt "${#packages[@]}" ]
	do
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		local repository="${packages[${i}]}"
		i="$((${i} + 1))"
		local branch="${packages[${i}]}"
		i="$((${i} + 1))"
		# slug
		i="$((${i} + 1))"

		if [ "${repository}" = '-' ]
		then
			continue
		fi

		_cd

		if ! [ -d "${directory}" ]
		then
			{
				echo "$(pwd)/${directory}"
				if [ "${branch}" = '-' ]
				then
					git clone "${repository}"
				else
					git clone --branch "${branch}" "${repository}"
				fi
			} | _prefix "Clone ${name}"
		fi

		{
			cd "${directory}"
			pwd

			_pull
		} | _prefix "Pull ${name}"
	done
}

_meson_setup () {
	if ! [ -f 'build/compile_commands.json' ]
	then
		meson setup \
			'build' \
			-D'prefix'="${install_dir}" \
			"${@}"
	else
		meson setup \
			--reconfigure \
			'build' \
			-D'prefix'="${install_dir}" \
			"${@}"
	fi
}

_cmake_setup () {
	cmake \
		-S'.' \
		-B'build' \
		-D'CMAKE_INSTALL_PREFIX'="${install_dir}" \
		"${@}"

	echo '*' > 'build/.gitignore'
}

_cmake_target () {
	cmake \
		--build 'build' \
		--parallel "${usable_job_count}" \
		-- "${@}"
}

_cmake_compile_install () {
	_cmake_target

	_cmake_target install
}

_meson_compile_install () {
	meson compile \
		-C 'build' \
		-j "${usable_job_count}"

	meson install \
		-C 'build'
}

_build_generic_python () {
	python3 'setup.py' build

	# PYTHONUSERBASE already takes care of it:
	# --prefix="${install_dir}"
	python3 'setup.py' install --user
}

_build_generic_cmake () {
	_cmake_setup

	_cmake_compile_install
}

_build_generic_meson () {
	_meson_setup

	_meson_compile_install
}

_build_llvm () {
	# Explicit build type is now mandatory,
	# See https://github.com/llvm/llvm-project/commit/350bdf9227cebceb7b7a283f90f504555bf6c496
	_cmake_setup \
		-D'CMAKE_BUILD_TYPE'='Debug' \
		-D'LLVM_BUILD_LLVM_DYLIB'='ON' \
		-D'LLVM_LINK_LLVM_DYLIB'='ON' \
		-D'LLVM_ENABLE_RTTI'='ON'

	_cmake_compile_install
}

_build_clang () {
	# Explicit build type is now mandatory,
	# See https://github.com/llvm/llvm-project/commit/350bdf9227cebceb7b7a283f90f504555bf6c496
	_cmake_setup \
		-D'CMAKE_BUILD_TYPE'='Debug' \
		-D'LLVM_LINK_LLVM_DYLIB'='ON'

	_cmake_compile_install
}

_build_spirv_tools () {
	if ! [ -e 'external/SPIRV-Headers' ]
	then
		ln -sv '../../SPIRV-Headers' 'external/SPIRV-Headers'
	fi

	_build_generic_cmake
}

_build_spirv_llvm_translator () {
	_cmake_setup \
		-D'CMAKE_CXX_COMPILER'="${install_dir}/bin/clang++" \
		-D'LLVM_LINK_LLVM_DYLIB'='ON' \
		-D'LLVM_SPIRV_INCLUDE_TESTS'='OFF'

	_cmake_compile_install

	_cmake_target 'llvm-spirv'

	cp -av \
		'build/tools/llvm-spirv/llvm-spirv' \
		"${install_dir}/bin/llvm-spirv"
}

_build_mesa () {
	# When building Mesa with Clang 15, this may be needed:
	#  -D'c_args'='-Wno-error=incompatible-pointer-types-discards-qualifiers'
	# See https://gitlab.freedesktop.org/mesa/mesa/-/issues/6402
	# For debugging with libasan, this is needed:
	#  -D'b_sanitize'='address'
	_meson_setup \
		-D'cpp_rtti'='true' \
		-D'rust_std'='2021' \
		-D'gallium-rusticl'='true' \
		-D'opencl-spirv'='true' \
		-D'shader-cache'='true' \
		-D'dri-drivers'='[]' \
		-D'dri3'='enabled' \
		-D'egl'='enabled' \
		-D'gbm'='disabled' \
		-D'glx'='dri' \
		-D'gallium-drivers'='radeonsi,r600,nouveau,swrast,iris' \
		-D'gallium-nine'='false' \
		-D'gallium-opencl'='disabled' \
		-D'gallium-va'='disabled' \
		-D'gallium-vdpau'='disabled' \
		-D'gallium-xa'='disabled' \
		-D'gallium-xvmc'='disabled' \
		-D'opengl'='true' \
		-D'gles1'='disabled' \
		-D'gles2'='disabled' \
		-D'vulkan-drivers'='[]' \
		-D'llvm'='enabled' \
		-D'lmsensors'='disabled' \
		-D'shared-llvm'='enabled'

	_meson_compile_install
}

_build () {
	local job_count="$(nproc)"
	local do_force='false'

	while ! [ -z "${1:-}" ]
	do
		case "${1:-}" in
			'--no-pull')
				do_pull='false'
				shift
				;;
			'--force')
				do_force='true'
				shift
				;;
			'-j'|'--jobs')
				shift
				if [ -z "${1:-}" ]
				then
					_error 'Missing job count.'
				fi

				job_count="${1}"
				shift
				;;
			'-j'*)
				job_count="${1:2}"
				shift
				;;
			'-h'|'--help'|'')
				_help
				;;
			'-'*|'--'*)
				_error 'Unknown build option.'
				;;
			*)
				_error 'Unknown build parameter.'
				;;
		esac
	done

	local llvm_job_count="${job_count}"
	local mem_available_k="$(grep '^MemAvailable:' /proc/meminfo | awk '{ print $2 }')"
	local mem_available_g="$((${mem_available_k} / 1024 / 1024))"
	local mem_per_core="$((${mem_available_g} / ${job_count}))"
	local min_llvm_mem_per_core='8'

	if [ "${mem_per_core}" -lt "${min_llvm_mem_per_core}" ]
	then
		if ! "${do_force}"
		then
			llvm_job_count="$((${mem_available_g} / ${min_llvm_mem_per_core}))"

			cat >&2 <<-EOF
			WARNING: The computer has less than ${min_llvm_mem_per_core}G of available memory per CPU core.
			LLVM will be compiled will ${llvm_job_count} jobs instead of ${job_count} to prevent the computer
			to run out of memory when linking LLVM.

			Use --force to force using ${job_count} jobs when compiling LLVM.
			EOF

			sleep 5s
		fi
	fi

	_set_env

	_fetch

	local i=0
	while [ "${i}" -lt "${#packages[@]}" ]
	do
		local name="${packages[${i}]}"
		i="$((${i} + 1))"
		local directory="${packages[${i}]}"
		i="$((${i} + 1))"
		# repository
		i="$((${i} + 1))"
		# branch
		i="$((${i} + 1))"
		local slug="${packages[${i}]}"
		i="$((${i} + 1))"

		if [ "${slug}" = '-' ]
		then
			continue
		fi

		if [ "${name}" = 'LLVM' ]
		then
			usable_job_count="${llvm_job_count}"
		else
			usable_job_count="${job_count}"
		fi

		{
			_cd

			cd "${directory}"
			pwd

			echo "${slug}"
			"_build_${slug}"
		} | _prefix "Build ${name}"
	done
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		cd "${workspace_dir}"

		local i=0
		while [ "${i}" -lt "${#packages[@]}" ]
		do
			local name="${packages[${i}]}"
			i="$((${i} + 1))"
			local directory="${packages[${i}]}"
			i="$((${i} + 1))"
			local repository="${packages[${i}]}"
			i="$((${i} + 1))"
			# branch
			i="$((${i} + 1))"
			# slug
			i="$((${i} + 1))"

			if [ "${repository}" = '-' ]
			then
				continue
			fi

			{
				_cd

				echo "$(pwd)/${directory}"
				rm -force --recursive --verbose "${directory}"
			} | _prefix "Clean ${name}"
		done

		cd "${script_dir}"

		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_shell () {
	_set_env

	_cd

	pwd | _prefix "Shell ${script_name}"

	"${SHELL}"
}

_run () {
	if [ "${1:-}" = '--force' ]
	then
		shift
	elif ! [ -f "${install_dir}${required_file}" ]
	then
		_error "${project_name} is not built."
	fi

	_set_env

	if [ -z "${1:-}" ]
	then
		_error 'Missing command.'
	fi
	
	"${@}"

	exit
}

tab=$'\t'

_mention () {
	cat >&2 <<-EOF
	This tool is provided by the I love compute! initiative.

	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	cat <<-EOF
	${script_name}: Download and build ${project_name} to run OpenCL on supported devices.

	Usage: ${script_name} [OPTION] [ACTION] [OPTION] [COMMAND]

	Option:
	${tab}-h, --help
	${tab}${tab}Print this help.

	Actions:
	${tab}build
	${tab}${tab}Download and build ${project_name}.
	${tab}clean
	${tab}${tab}Clean-up downloaded and built files for ${project_name}.
	${tab}shell
	${tab}${tab}Open an interactive shell in the ${project_name} workspace.
	${tab}run
	${tab}${tab}Run command with ${project_name}.

	Build options:
	${tab}--no-pull
	${tab}${tab}Do not pull updates from source repositories when building.
	${tab}-jN,--jobs N
	${tab}${tab}Build with N parallel jobs (default: Availables core count).
	${tab}--force
	${tab}${tab}Force using as much parallel jobs even when there may not be enough memory.

	Run options:
	${tab}--force
	${tab}${tab}Run the command even if ${project_name} isn't installed yet.

	Commands:
	${tab}Anything you want, for example clinfo.

	Examples:
	${tab}${script_name} build

	${tab}${script_name} run clinfo --list

	${tab}LP_CL=1 ${script_name} run clinfo --list

	EOF

	_mention

	exit
}

case "${1:-}" in
	'build'|'clean'|'shell'|'run')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

"_${action}" "${@}"

printf '\n'

_mention
