#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2022 Thomas “illwieckz“ Debesse

# You may need to install:
# For oiio:
#   libilmbase-dev libopenexr-dev libtiff-dev libpython2.7-dev
# For luxcore and luxmark:
#   libboost-thread-dev libboost-program-options-dev libboost-filesystem-dev libboost-serialization-dev libboost-iostreams-dev libboost-regex-dev libboost-system-dev libboost-python-dev libtbb2-dev
# For luxmark:
#   qt5-qmake and others

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

. "${script_dir}/include.common.sh"

project_name='LuxMark v3.1'
required_file='/opt/luxmark/luxmark'
help_preset='basic_application'
build_preset='basic_project'

packages=(
	# package name
	#	directory name
	#	repository or archive url
	#	branch or archive name
	#	build slug
	'OpenImageIO'
		'oiio'
		'https://github.com/OpenImageIO/oiio.git'
		# We must build before 47c33add2463989d0a23a0b27adc57f273304cbc
		'Release-1.6.3dev'
		'oiio'
	'Embree'
		'embree'
		'https://github.com/embree/embree.git'
		'v2.17.7'
		'embree'
	'OpenCL Headers'
		'OpenCL-Headers'
		'https://github.com/KhronosGroup/OpenCL-Headers.git'
		# Validated up to 3568763309367bc7d7088a1d3f82f2d32c76a7f8
		'v2022.01.04'
		'generic_cmake'
	'OpenCL CLHPP'
		'OpenCL-CLHPP'
		'https://github.com/KhronosGroup/OpenCL-CLHPP.git'
		# We must build before 432b551429b362a877ed9b647b7114022b332be0
		'v2.0.11'
		'clhpp'
	'LuxCore'
		'LuxCore'
		'https://github.com/LuxCoreRender/LuxCore.git'
		'luxmark_v3.1'
		'luxcore'
	'LuxMark'
		'LuxMark'
		'https://github.com/LuxCoreRender/LuxMark.git'
		'luxmark_v3.1'
		'luxmark'
	'scenes'
		'scenes'
		'https://github.com/LuxCoreRender/LuxMark/releases/download/luxmark_v3.1/scenes-v3.1.zip'
		'1b1288fb171e663e5892031be2e544de4d11b86594a7a3f754987fd7b636a6a3cf0a6c2775331a9e7e67ac1263839027592fbb2e4b4baba6c9522869076432bd'
		'scenes'
)

_set_custom_env () {
	# Needed by OpenCL-ICD-Loader
	export C_INCLUDE_PATH="${install_dir}/include:${C_INCLUDE_PATH:-}"
	export CPLUS_INCLUDE_PATH="${install_dir}/include:${CPLUS_INCLUDE_PATH:-}"

	# See also DYLD_LIBRARY_PATH (that can break as well)
}

_set_custom_run_env () {
	export PATH="${install_dir}/opt/luxmark:${PATH:-}"

	cd "${install_dir}/opt/luxmark"
}

_build_oiio () {
	# Newer versions
	#	if [ -f 'src/build-scripts/build_pybind11.bash' ]
	#	then
	#		'src/build-scripts/build_pybind11.bash'
	#	fi

	_apply_patches \
		'luxmark3/luxmark3-oiio-gpstag-redefinition.patch' \
		'luxmark3/luxmark3-oiio-boost-placeholders-rewrite.patch'

	_cmake_setup \
		-D'USE_LIBRAW'='OFF' \
		-D'USE_FFMPEG'='OFF' \
		-D'CMAKE_CXX_FLAGS'='-Wno-error=stringop-truncation -Wno-error=class-memaccess -Wno-error=sizeof-pointer-memaccess -Wno-error=unused-function -Wno-error=deprecated-declarations -Wno-error=maybe-uninitialized -Wno-error=stringop-overflow= -Wno-error=misleading-indentation -Wno-error=format-truncation= -Wno-error=aligned-new= -Wno-error=mismatched-new-delete'

		# For more recent compilers:
		# -D'CMAKE_CXX_FLAGS'='-Wno-error=sizeof-pointer-memaccess -Wno-error=unused-function -Wno-error=deprecated-declarations -Wno-error=maybe-uninitialized -Wno-error=stringop-overflow= -Wno-error=misleading-indentation -Wno-error=format-truncation= -Wno-error=aligned-new='

	_cmake_compile_install
}

_build_embree () {
	_cmake_setup \
		-D'EMBREE_ISPC_SUPPORT'='OFF' \
		-D'EMBREE_TUTORIALS'='OFF'

	_cmake_compile_install
}

_build_clhpp () {
	_cmake_setup \
		-D'OPENCL_INCLUDE_DIR'="${install_dir}/include" \
		-D'OPENCL_LIB_DIR'="${install_dir}/lib" \
		-D'BUILD_EXAMPLES'='OFF' \
		-D'BUILD_TESTS'='OFF' \
		-D'BUILD_DOCS'='OFF'

	_cmake_compile_install
}

_build_luxcore () {
	_apply_patches \
		'luxmark3/luxmark3-luxcore-no-samples.patch' \
		'luxmark3/luxmark3-luxcore-no-pyluxcore.patch' \
		'luxmark3/luxmark3-luxcore-no-division-by-zero-pdf-clamp.patch' \
		'luxmark3/luxmark3-luxcore-do-not-crash-on-kernel-build-failure.patch' \
		'luxmark3/luxmark3-luxcore-catch-opencl-errors-on-platform-listing.patch' \
		'luxmark3/luxmark3-luxcore-catch-opencl-errors-on-device-listing.patch' \
		'luxmark3/luxmark3-luxcore-optionally-print-opencl-build-log.patch' \
		'luxmark3/luxmark3-luxcore-optionally-prefer-bvh.patch' \
		'luxmark3/luxmark3-luxcore-optionally-disable-image.patch'

	# LuxCore doesn't build with ninja:
	# ninja: error: build.ninja:829: lexing error
	_cmake_setup \
		-G'Unix Makefiles'

	_cmake_target

	# No install target.
	#	_cmake_compile_install

	mkdir -pv "${install_dir}/include"
	cp -av 'include/.' "${install_dir}/include/."

	mkdir -pv "${install_dir}/lib"
	cp -av 'build/lib/.' "${install_dir}/lib/."
}

_build_luxmark () {
	_apply_patches \
		'luxmark3/luxmark3-luxmark-port-to-qt5.patch' \
		'luxmark3/luxmark3-luxmark-lowercase-false.patch' \
		'luxmark3/luxmark3-luxmark-catch-context-errors.patch' \
		'luxmark3/luxmark3-luxmark-read-opencl-compiler-options-from-environment.patch' \
		'luxmark3/luxmark3-luxmark-also-print-debug-log-on-stderr.patch' \
		'luxmark3/luxmark3-luxmark-luxmark-device-type-enable.patch' \
		'luxmark3/luxmark3-luxmark-fill-submission-form-from-environment.patch'

	_cmake_setup \
		-D'LuxRays_HOME'="${install_dir}"

	_cmake_target

	# No install target.
	#	_cmake_compile_install

	mkdir -pv "${install_dir}/opt/luxmark"
	cp -av 'build/bin/luxmark' "${install_dir}/opt/luxmark/luxmark"
}

_build_scenes () {
	mkdir -pv "${install_dir}/opt/luxmark/scenes"
	cp -av . "${install_dir}/opt/luxmark/scenes/."
}

_run_custom_command () {
	"${install_dir}${required_file}" --mode='PAUSE'
}

_help_custom_run () {
	cat <<-EOF
	${tab}${script_name} run luxmark --mode=PAUSE
	EOF
}

_spawn "${@}"
