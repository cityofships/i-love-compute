#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2020 Thomas “illwieckz“ Debesse

# Exit in case of failure.
set -e

# Error on undefined variable.
set -u

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir='workspace'
workspace_dir="${workspace_parent_dir}/${script_name}"

tarball_referer='https://www.amd.com'
tarball_repo='https://drivers.amd.com/drivers/linux'

amdgpupro_libopencl_package_name='ocl-icd-libopencl1-amdgpu-pro'

clover_deb_url_list='
http://fr.archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-dev_0.2.0+git20190827-4_all.deb
http://fr.archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-amdgcn_0.2.0+git20190827-4_all.deb
http://fr.archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-r600_0.2.0+git20190827-4_all.deb
http://fr.archive.ubuntu.com/ubuntu/pool/universe/m/mesa/mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

clover_deb_sum_list='
800186922168ff3563a875adcd3f8084749858d64f37ffd044fbfa9f0625d466552afdbd1469f00ee6feb93b6bd33dae377c043df43d02678ae8c643f09560c5  libclc-dev_0.2.0+git20190827-4_all.deb
dc1510a5dd0cfbec431d046527dd11bcfc84c82a3fdd6d649781afb93a2af3a9dc28551a29024a5c7ae55b3457bd067481db3826cc0c931cd7f82881542d50d2  libclc-amdgcn_0.2.0+git20190827-4_all.deb
5680efd08badbbda9c7bd252890dd107fd4bf3399d0c73b5c685abd755419088a5c32d42ac419dd21f33968258937880782c1ae4129b9411b12aac9d531f85bc  libclc-r600_0.2.0+git20190827-4_all.deb
f276430f9f1d70d75692857dc7aa79365d6ef5dc1fd4ad816319e6f375e86f8eb29f49288d4f51d54da0f276712195fc217957c0e742696b338b91959bcd2e6e  mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

stream_tarball_file="radeon-crimson-15.12-15.302-151217a-297685e.zip"
stream_tarball_sum='1658c3109e9dca2a1f0bd972e9042e7ccf17742e9c6110f04151334f342eb53d5a736b9cb63358a26d97562f1efb9e36c281bca85664e06f0cd11c275972f3af'
stream_tarball_dir='fglrx-15.302'
stream_script_file='amd-driver-installer-15.302-x86.x86_64.run'
stream_install_dir='/opt/amd-stream'

orca_tarball_file="amdgpu-pro-21.20-1271047-ubuntu-20.04.tar.xz"
orca_tarball_sum='530673e00c8e243e73e9322386f949c72d09c7f8f75f9760a4fad379d30a79c4562e79fc5eec9825adc1b8a396b23bda209182b7b457c2bce81c5c45500fb19b'
orca_deb_file_list='opencl-orca-amdgpu-pro-icd_21.20-1271047_amd64.deb'
orca_tarball_dir="$(basename "${orca_tarball_file}" '.tar.xz')"

pal_tarball_file="amdgpu-pro-20.40-1147286-ubuntu-20.04.tar.xz"
pal_tarball_sum='9b064a3b02d2a1ec18fdd6c098b70f4a8c6f93e4bfdc4e9a032ca387bdf7223278622c19d5bd55e493555c5f734168c3f2768cb743f9e00dcf5f96cbc399c7b3'
pal_deb_file_list='opencl-amdgpu-pro-comgr_20.40-1147286_amd64.deb opencl-amdgpu-pro-icd_20.40-1147286_amd64.deb'
pal_tarball_dir="$(basename "${pal_tarball_file}" '.tar.xz')"

amdgpupro_deb_repo='https://repo.radeon.com/amdgpu-install/21.40.1/ubuntu/focal'

amdgpupro_deb_version='21.40.1.40501-1'
amdgpupro_deb_file="amdgpu-install_${amdgpupro_deb_version}_all.deb"
amdgpupro_deb_sum='2dc31efa27e8ecd940dc46d6b30d99cbf2381724102e08995a14021b29598e9d0b76abcd7f13f426b0659bfccd20672ddea9b8266e540ce6161ced4c50079f3b'

rocm_package_name_list="${amdgpupro_libopencl_package_name} rocm-opencl"

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

is_clover='false'
is_stream='false'
is_orca='false'
is_pal='false'
is_rocm='false'

_is () {
	case "${1}" in
		'clover')
			"${is_clover}"
			;;
		'stream')
			"${is_stream}"
			;;
		'orca')
			"${is_orca}"
			;;
		'pal')
			"${is_pal}"
			;;
		'rocm')
			"${is_rocm}"
			;;
	esac
}

_checksum () {
	_cd

	case "${1}" in
		'clover')
			local IFS=$'\n'
			for package_sum_line in \
				$(echo "${clover_deb_sum_list}" | grep -v '^$')
			do
				sum="$(echo "${package_sum_line}" | awk '{ print $1 }')"
				file="$(echo "${package_sum_line}" | awk '{ print $2 }')"

				if [ -f "${file}" ]
				then
					if printf '%s %s\n' "${sum}" "${file}" \
						| sha512sum -c '/dev/stdin'
					then
						continue
					fi
				fi

				false
			done

			return
			;;
		'stream')
			sum="${stream_tarball_sum}"
			file="${stream_tarball_file}"
			;;
		'amdgpupro')
			sum="${amdgpupro_deb_sum}"
			file="${amdgpupro_deb_file}"
			;;
		'orca')
			sum="${orca_tarball_sum}"
			file="${orca_tarball_file}"
			;;
		'pal')
			sum="${pal_tarball_sum}"
			file="${pal_tarball_file}"
			;;
	esac

	false

	if [ -f "${file}" ]
	then
		if printf '%s %s\n' "${sum}" "${file}" \
			| sha512sum -c '/dev/stdin'
		then
			return
		fi
	fi

	false
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_download () {
	_cd

	if _is clover
	then
		if ! _checksum 'clover'
		then
			for clover_deb_url in \
				$(echo "${clover_deb_url_list}" | grep -v '^$' )
			do
				clover_package_file="$(echo "${clover_deb_url}" | sed -e 's|.*/||g' )"

				echo "Download ${clover_package_file}."

				wget --continue \
					"${clover_deb_url}"
			done

			_checksum 'clover'
		fi
	fi

	if _is stream
	then
		if ! _checksum 'stream'
		then
			echo "Download ${stream_tarball_file}."

			wget --continue \
				--header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${stream_tarball_file}"

			_checksum 'stream'
		fi
	fi

	if _is orca || _is pal || _is rocm
	then
		if ! _checksum 'amdgpupro'
		then
			echo "Download ${amdgpupro_deb_file}."
			wget --continue \
				"${amdgpupro_deb_repo}/${amdgpupro_deb_file}"

			_checksum 'amdgpupro'
		fi
	fi

	if _is orca
	then
		if ! _checksum 'orca'
		then
			echo "Download ${orca_tarball_file}."

			wget --continue \
				--header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${orca_tarball_file}"

			_checksum 'orca'
		fi
	fi

	if _is pal
	then
		if ! _checksum 'pal'
		then
			echo "Download ${pal_tarball_file}."

			wget --continue \
				--header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${pal_tarball_file}"

			_checksum 'pal'
		fi
	fi
}

_extract () {
	_cd

	_download

	if _is stream
	then
		if ! [ -d "${stream_tarball_dir}" ]
		then
			echo "Extract ${stream_tarball_file}."

			unzip "${stream_tarball_file}"
		fi
	fi

	if _is orca
	then
		if ! [ -d "${orca_tarball_dir}" ]
		then
			echo "Extract ${orca_tarball_file}."

			tar --no-same-permissions -xvJf "${orca_tarball_file}"
		fi
	fi

	if _is pal
	then
		if ! [ -d "${pal_tarball_dir}" ]
		then
			echo "Extract ${pal_tarball_file}."

			tar --no-same-permissions -xvJf "${pal_tarball_file}"
		fi
	fi
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		rm --force --verbose "${workspace_dir}/${stream_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${stream_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${orca_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${orca_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${pal_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${pal_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdgpupro_deb_file}"
		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_purge () {
	case "${1}" in
		'clover')
			for clover_deb_file in \
				$(echo "${clover_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }' | tac)
			do
				clover_package_name="$(echo "${clover_deb_file}" | cut -f1 -d'_' )"

				apt-mark unhold "${clover_package_name}"

				dpkg --purge "${clover_package_name}"
			done
			;;
		'stream')
			rm --force --verbose \
				"${stream_install_dir}/x86_64-linux-gnu/libamdocl64-stream.so"
			rm --force --verbose \
				"${stream_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

			if [ -d "${stream_install_dir}/x86_64-linux-gnu" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${stream_install_dir}/x86_64-linux-gnu"
			fi

			if [ -d "${stream_install_dir}" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${stream_install_dir}"
			fi

			rm --force --verbose \
				'/etc/ld.so.conf.d/30-amd-stream.conf'
			rm --force --verbose \
				'/etc/OpenCL/vendors/amdocl-stream64.icd'
			;;
		'orca')
			for orca_deb_file in \
				$(echo "${orca_deb_file_list}" | tr ' ' '\n' | tac)
			do
				orca_package_name="$(echo "${orca_deb_file}" | cut -f1 -d'_')"
				dpkg --purge "${orca_package_name}"
			done

			# Alternate name for opencl-orca-amdgpu-pro-icd package.
			dpkg --purge 'opencl-legacy-amdgpu-pro-icd'
			;;
		'pal')
			for pal_deb_file in \
				$(echo "${pal_deb_file_list}" | tr ' ' '\n' | tac)
			do
				pal_package_name="$(echo "${pal_deb_file}" | cut -f1 -d'_')"
				dpkg --purge "${pal_package_name}"
			done
			;;
		'rocm')
			for rocm_package_name in \
				$(echo "${rocm_package_name_list}" | tr ' ' '\n' | tac)
			do
				dpkg --purge "${rocm_package_name}"
			done
			;;
	esac
}

_uninstall () {
	_purge clover
	_purge orca
	_purge stream
	_purge pal
	_purge rocm

	dpkg-divert \
		--rename \
		--remove '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

	rm --force --verbose '/etc/OpenCL/vendors/amdocl-pal64.icd'

	if test -f '/usr/bin/amdgpu-install'
	then
		echo 'Yes' | '/usr/bin/amdgpu-install' --uninstall
	fi

	amdgpupro_package_name="$(echo "${amdgpupro_deb_file}" | cut -f1 -d'_')"
	dpkg --purge "${amdgpupro_package_name}"

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}

_install () {
	_extract

	if _is orca || _is pal
	then
		apt-get update

		echo "Download gdebi-core package."
		apt-get install -y 'gdebi-core'
	fi

	if _is orca || _is pal || _is rocm
	then
		echo "Install ${amdgpupro_deb_file} package."

		dpkg -i "${amdgpupro_deb_file}"

		sed -e 's/^#deb /deb /' -i '/etc/apt/sources.list.d/amdgpu-proprietary.list'
	fi

	if _is clover || _is orca || _is pal || _is rocm
	then
		apt-get update
	fi

	if _is clover
	then
		_purge clover

		for clover_deb_file in \
			$(echo "${clover_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }')
		do
			clover_package_name="$(echo "${clover_deb_file}" | cut -f1 -d'_' )"

			echo "Install ${clover_package_name} package."

			gdebi --non-interactive "${clover_deb_file}"

			apt-mark hold "${clover_package_name}"
		done
	fi

	if _is stream
	then
		_purge stream

		local stream_extract_prefix="${stream_tarball_dir}/prefix"

		if ! [ -d "${stream_extract_prefix}" ]
		then
			"${stream_tarball_dir}/${stream_script_file}" --extract "${stream_extract_prefix}"
		fi

		mkdir --parents --verbose "${stream_install_dir}"
		mkdir --parents --verbose "${stream_install_dir}/x86_64-linux-gnu"

		cp --archive --verbose \
			"${stream_extract_prefix}/arch/x86_64/usr/lib64/libamdocl64.so" \
			"${stream_install_dir}/x86_64-linux-gnu/libamdocl64-stream.so"

		cp --archive --verbose \
			"${stream_extract_prefix}/arch/x86_64/usr/lib64/libamdocl12cl64.so" \
			"${stream_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

		sed -e 's/libamdocl12cl64.so/libfglocl12cl64.so/g' \
			-i "${stream_install_dir}/x86_64-linux-gnu/libamdocl64-stream.so"

		echo 'libamdocl64-stream.so' > '/etc/OpenCL/vendors/amdocl-stream64.icd'

		echo "${stream_install_dir}/x86_64-linux-gnu" \
			> '/etc/ld.so.conf.d/30-amd-stream.conf'
	fi

	if _is orca
	then
		_purge orca

		# Already correct:
		# /opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-orca64.so

		local orca_deb_file
		for orca_deb_file in ${orca_deb_file_list}
		do
			echo "Install ${orca_deb_file} package."
			
			gdebi --non-interactive "${orca_tarball_dir}/${orca_deb_file}"
		done

		# Already correct:
		# libamdocl-rocm64.so
		# /etc/OpenCL/vendors/amdocl-orca64.icd
	fi
	
	if _is pal
	then
		_purge pal

		dpkg-divert \
			--divert '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-pal64.so' \
			--rename '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

		local pal_deb_file
		for pal_deb_file in ${pal_deb_file_list}
		do
			echo "Install ${pal_deb_file} package."

			gdebi --non-interactive "${pal_tarball_dir}/${pal_deb_file}"
		done

		rm --force --verbose '/etc/OpenCL/vendors/amdocl64.icd'

		echo 'libamdocl-pal64.so' > '/etc/OpenCL/vendors/amdocl-pal64.icd'
	fi

	if _is rocm
	then
		_purge rocm

		# Already correct (icd may be renamed):
		# /opt/rocm-4.5.1/opencl/lib/libamdocl64.so

		for rocm_package_name in ${rocm_package_name_list}
		do
			echo "Install ${rocm_package_name} package."

			apt-get install --yes "${rocm_package_name}"
		done

		# Already correct (icd may be renamed):
		# libamdocl64.so
		# /etc/OpenCL/vendors/amdocl64.icd
	fi

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}

tab=$'\t'

_mention () {
	cat <<-EOF
	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of your the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	cat <<-EOF
	${script_name}: Download, install or uninstall OpenCL drivers for AMD GPUs and CPUs

	Usage: ${script_name} [OPTION] [ACTION] [NAMES]

	Option:
	${tab}-h, --help
	${tab}${tab}Print this help.

	Actions:
	${tab}download
	${tab}${tab}Download files if needed by NAME
	${tab}extract
	${tab}${tab}Download archives if needed by NAME
	${tab}clean
	${tab}${tab}Clean-up download and extracted files for NAME
	${tab}install
	${tab}${tab}Install NAME (default: clover)
	${tab}uninstall
	${tab}${tab}Uninstall all OpenCL drivers for AMD GPUs.

	Names:
	${tab}all
	${tab}${tab}All OpenCL drivers for AMD GPUs and CPUs
	${tab}clover (default)
	${tab}${tab}Mesa Clover for Terascale2-3 and GCN+ GPUs
	${tab}stream
	${tab}${tab}AMD APP Stream from Radeon Crimson for CPUs
	${tab}orca
	${tab}${tab}AMD APP Orca from AMDGPU-PRO for GCN1-3 GPUs
	${tab}pal
	${tab}${tab}AMD APP PAL from AMDGPU-PRO for GCN4+ GPUs
	${tab}rocm
	${tab}${tab}AMD APP ROCm for Radeon Pro GPUs

	EOF
	
	_mention

	exit
}

case "${1:-}" in
	'download'|'extract'|'clean'|'install'|'uninstall')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

case "${action}" in
	'download'|'extract'|'clean'|'install')
		if [ -z "${1:-}" ]
		then
			is_clover='true'
		fi

		while ! [ -z "${1:-}" ]
		do
			case "${1}" in
				'all')
					is_clover='true'
					is_stream='true'
					is_orca='true'
					is_pal='true'
					is_rocm='true'
					;;
				'clover')
					is_clover='true'
					;;
				'stream')
					is_stream='true'
					;;
				'orca')
					is_orca='true'
					;;
				'pal')
					is_pal='true'
					;;
				'rocm')
					is_rocm='true'
					;;
				*)
					_error 'Unkown name.'
					;;
			esac

			shift
		done
		;;
esac

"_${action}"

printf '\n'

_mention
