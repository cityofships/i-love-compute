#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2020 Thomas “illwieckz“ Debesse

set -e

tab="$(printf '\t')"

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"
workspace_dir="workspace/${script_name}"

tarball_file='amdgpu-pro-20.40-1147286-ubuntu-20.04.tar.xz'
tarball_sum='9b064a3b02d2a1ec18fdd6c098b70f4a8c6f93e4bfdc4e9a032ca387bdf7223278622c19d5bd55e493555c5f734168c3f2768cb743f9e00dcf5f96cbc399c7b3'
tarball_dir="$(basename "${tarball_file}" '.tar.xz')"

printSums () {
	cat <<-EOF
	${tarball_sum} ${tarball_file}
	EOF
}

cdWorkspace () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"
	cd "${workspace_dir}"
}

_download () {
	cdWorkspace

	if [ -f "${tarball_file}" ]
	then
		if printSums | sha512sum -c /dev/stdin
		then
			return
		fi
	fi

	echo "download ${tarball_file}"
	wget --continue \
		--header="Referer: https://www.amd.com" \
		"https://drivers.amd.com/drivers/linux/${tarball_file}"
}

_extract () {
	cdWorkspace

	_download

	if ! [ -d "${tarball_dir}" ]
	then
		echo "extract ${tarball_file}"
		tar --no-same-permissions -xvJf "${tarball_file}"
	fi
}

_clean () {
	cd "${script_dir}"
	if [ -d "${workspace_dir}" ]
	then
		rm --verbose "${workspace_dir}/${tarball_file}"
		rm -r --verbose "${workspace_dir}/${tarball_dir}"
		rmdir --verbose "${workspace_dir}"
	fi
}

_uninstall () {
	if test -f '/usr/bin/amdgpu-uninstall'
	then
		echo 'Yes' | '/usr/bin/amdgpu-uninstall'
	fi
}

_install () {
	local framework_option="${1}"
	if [ -z "${framework_option}" ]
	then
		framework_option='legacy,pal'
	fi

	_extract

	_uninstall

	cd "${tarball_dir}"

	echo 'Yes' | sudo ./'amdgpu-install' --no-dkms --headless --opencl="${framework_option}"
}

failure='false'

_help () {
	cat <<-EOF
	Usage: ${script_name} [ACTION] [OPTION]

	ACTION:
	${tab}download
	${tab}extract
	${tab}clean
	${tab}install
	${tab}uninstall

	OPTION:
	${tab}--framework=legacy,pal (default)
	${tab}--framework=legacy
	${tab}--framework=pal
	EOF

	! "${failure}"

	exit
}

_error () {
	failure='true'
	_help
}

action='error'

while ! [ -z "${1}" ]
do
	case "${1}" in
		'download'|'extract'|'clean'|'install'|'uninstall')
			if [ "${action}" = 'error' ]
			then
				action="${1}"
			else
				_error
			fi
			;;
		'--framework='*)
			if [ "${action}" = 'install' ]
			then
				framework_option="${1:12}"
				action="${action} ${framework_option}"
			else
				_error
			fi
			;;
		'-h'|'--help')
			action='help'
			break
			;;
		*)
			_error
			;;
	esac

	shift
done

_${action}
