#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2022 Thomas “illwieckz“ Debesse

# This script is known to work on Ubuntu 20.04 LTS and Ubuntu 21.10.
# Clover packages installed with this script will probably not work
# with Ubuntu 22.04 LTS as required dependencies would not be available
# in repositories. Official Ubuntu Clover packages may be usable
# with radeonsi as long as -cl-fast-relaxed-math is not enabled.
# See https://github.com/llvm/llvm-project/issues/54947
# Official Ubuntu Clover packages may not be usable with r600.
# See https://github.com/llvm/llvm-project/issues/54942

# Exit in case of failure.
set -e
set -o pipefail

# Error on undefined variable.
set -u

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir='workspace'
workspace_dir="${workspace_parent_dir}/${script_name}"

tarball_referer='https://www.amd.com'
tarball_repo='https://drivers.amd.com/drivers/linux'

mesa_old_clover_opencl_deb_url_list='
http://archive.ubuntu.com/ubuntu/pool/main/l/llvm-toolchain-9/libllvm9_9.0.1-12_amd64.deb
http://archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-9/libclang-common-9-dev_9.0.1-12_amd64.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-dev_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-amdgcn_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-r600_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/m/mesa/mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

mesa_old_clover_opencl_deb_sum_list='
48bd8b89c9ca18b9360dbc04a65fea3d37b97664b4fc39202ff9006105f218dbab7fd7ce80c897e22c0e7b5e338317a361b54b726059ab74e6780e88c197b689  libllvm9_9.0.1-12_amd64.deb
18f5008921e7b1f52e0d91b07e170b22fca1a34899fc1d4d6e6ff8ed8f93137d88dc0aecc7631aac381e9e84f2c9bf54b2f0bdfa306d10d61f1380f42e53660f  libclang-common-9-dev_9.0.1-12_amd64.deb
800186922168ff3563a875adcd3f8084749858d64f37ffd044fbfa9f0625d466552afdbd1469f00ee6feb93b6bd33dae377c043df43d02678ae8c643f09560c5  libclc-dev_0.2.0+git20190827-4_all.deb
dc1510a5dd0cfbec431d046527dd11bcfc84c82a3fdd6d649781afb93a2af3a9dc28551a29024a5c7ae55b3457bd067481db3826cc0c931cd7f82881542d50d2  libclc-amdgcn_0.2.0+git20190827-4_all.deb
5680efd08badbbda9c7bd252890dd107fd4bf3399d0c73b5c685abd755419088a5c32d42ac419dd21f33968258937880782c1ae4129b9411b12aac9d531f85bc  libclc-r600_0.2.0+git20190827-4_all.deb
f276430f9f1d70d75692857dc7aa79365d6ef5dc1fd4ad816319e6f375e86f8eb29f49288d4f51d54da0f276712195fc217957c0e742696b338b91959bcd2e6e  mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

fglrx_tarball_file="radeon-crimson-15.12-15.302-151217a-297685e.zip"
fglrx_tarball_sum='1658c3109e9dca2a1f0bd972e9042e7ccf17742e9c6110f04151334f342eb53d5a736b9cb63358a26d97562f1efb9e36c281bca85664e06f0cd11c275972f3af'
fglrx_tarball_dir='fglrx-15.302'
fglrx_script_file='amd-driver-installer-15.302-x86.x86_64.run'
fglrx_install_dir='/opt/amd-fglrx'

amdgpupro_old_orca_tarball_file="amdgpu-pro-21.20-1271047-ubuntu-20.04.tar.xz"
amdgpupro_old_orca_tarball_sum='530673e00c8e243e73e9322386f949c72d09c7f8f75f9760a4fad379d30a79c4562e79fc5eec9825adc1b8a396b23bda209182b7b457c2bce81c5c45500fb19b'
amdgpupro_old_orca_deb_file_list='opencl-orca-amdgpu-pro-icd_21.20-1271047_amd64.deb'
amdgpupro_old_orca_tarball_dir="$(basename "${amdgpupro_old_orca_tarball_file}" '.tar.xz')"

amdgpupro_pal_tarball_file="amdgpu-pro-20.40-1147286-ubuntu-20.04.tar.xz"
amdgpupro_pal_tarball_sum='9b064a3b02d2a1ec18fdd6c098b70f4a8c6f93e4bfdc4e9a032ca387bdf7223278622c19d5bd55e493555c5f734168c3f2768cb743f9e00dcf5f96cbc399c7b3'
amdgpupro_pal_deb_file_list='opencl-amdgpu-pro-comgr_20.40-1147286_amd64.deb opencl-amdgpu-pro-icd_20.40-1147286_amd64.deb'
amdgpupro_pal_tarball_dir="$(basename "${amdgpupro_pal_tarball_file}" '.tar.xz')"

rocm_version='5.7'
rocm_distro='jammy'

amdgpupro_deb_repo="https://repo.radeon.com/amdgpu-install/${rocm_version}/ubuntu/${rocm_distro}"

amdgpupro_deb_version='5.7.50700-1'
amdgpupro_deb_file="amdgpu-install_${amdgpupro_deb_version}_all.deb"
amdgpupro_deb_sum='190c5528385ee589130df94c902cd5a7f9f6877bd960d8009f5a55bb1c1552013187fd2c382c42819186ad162be9d838c65ef7e09fead3e1b5b991adc6a8daf4'

mesa_all_opencl_package_name_list='mesa-opencl-icd'
rocm_old_rocr_opencl_package_name_list='ocl-icd-libopencl1-amdgpu-pro'
rocm_rocr_opencl_package_name_list='rocm-opencl-runtime'
rocm_hip_package_name_list='rocm-hip-runtime rocminfo'
amdgpupro_dkms_package_name_list='amdgpu-dkms'
amdgpupro_orca_opencl_package_name_list='opencl-legacy-amdgpu-pro-icd'
amdgpupro_mesa_opengl_package_name_list='libgl1-amdgpu-mesa-glx'
amdgpupro_mesa_va_package_name_list='mesa-amdgpu-va-drivers'
amdgpupro_mesa_vdpau_package_name_list='mesa-amdgpu-vdpau-drivers'
amdgpupro_oglp_opengl_package_name_list='amdgpu-pro-oglp'
amdgpupro_amdgpu_vulkan_name_list='vulkan-amdgpu'
amdgpupro_amdgpu_pro_vulkan_name_list='vulkan-amdgpu-pro'

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

is_mesa_old_clover_opencl='false'
is_mesa_all_opencl='false'
is_rocm_rocr_opencl='false'
is_rocm_hip='false'
is_amdgpupro_dkms='false'
is_amdgpupro_old_orca_opencl='false'
is_amdgpupro_orca_opencl='false'
is_amdgpupro_pal_opencl='false'
is_amdgpupro_mesa_opengl='false'
is_amdgpupro_mesa_va='false'
is_amdgpupro_mesa_vdpau='false'
is_amdgpupro_oglp_opengl='false'
is_amdgpupro_amdgpu_vulkan='false'
is_amdgpupro_amdgpu_pro_vulkan='false'
is_fglrx_cpu_opencl='false'

_is () {
	case "${1}" in
		'mesa-old-clover-opencl')
			"${is_mesa_old_clover_opencl}"
			;;
		'mesa-all-opencl')
			"${is_mesa_all_opencl}"
			;;
		'rocm-rocr-opencl')
			"${is_rocm_rocr_opencl}"
			;;
		'rocm-hip')
			"${is_rocm_hip}"
			;;
		'amdgpupro-dkms')
			"${is_amdgpupro_dkms}"
			;;
		'amdgpupro-old-orca-opencl')
			"${is_amdgpupro_old_orca_opencl}"
			;;
		'amdgpupro-orca-opencl')
			"${is_amdgpupro_orca_opencl}"
			;;
		'amdgpupro-pal-opencl')
			"${is_amdgpupro_pal_opencl}"
			;;
		'amdgpupro-mesa-opengl')
			"${is_amdgpupro_mesa_opengl}"
			;;
		'amdgpupro-mesa-va')
			"${is_amdgpupro_mesa_va}"
			;;
		'amdgpupro-mesa-vdpau')
			"${is_amdgpupro_mesa_vdpau}"
			;;
		'amdgpupro-oglp-opengl')
			"${is_amdgpupro_oglp_opengl}"
			;;
		'amdgpupro-amdgpu-vulkan')
			"${is_amdgpupro_amdgpu_vulkan}"
			;;
		'amdgpupro-amdgpu-pro-vulkan')
			"${is_amdgpupro_amdgpu_pro_vulkan}"
			;;
		'fglrx-cpu-opencl')
			"${is_fglrx_cpu_opencl}"
			;;
	esac
}

_checksum () {
	_cd

	case "${1}" in
		'old-clover')
			local IFS=$'\n'
			for package_sum_line in \
				$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$')
			do
				sum="$(echo "${package_sum_line}" | awk '{ print $1 }')"
				file="$(echo "${package_sum_line}" | awk '{ print $2 }')"

				if [ -f "${file}" ]
				then
					if printf '%s %s\n' "${sum}" "${file}" \
						| sha512sum -c '/dev/stdin'
					then
						continue
					fi
				fi

				false
				return
			done

			return
			;;
		'amdgpupro')
			sum="${amdgpupro_deb_sum}"
			file="${amdgpupro_deb_file}"
			;;
		'orca')
			sum="${amdgpupro_old_orca_tarball_sum}"
			file="${amdgpupro_old_orca_tarball_file}"
			;;
		'pal')
			sum="${amdgpupro_pal_tarball_sum}"
			file="${amdgpupro_pal_tarball_file}"
			;;
		'fglrx')
			sum="${fglrx_tarball_sum}"
			file="${fglrx_tarball_file}"
			;;
	esac

	if [ -f "${file}" ]
	then
		if printf '%s %s\n' "${sum}" "${file}" \
			| sha512sum -c '/dev/stdin'
		then
			return
		fi
	fi

	false
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_download () {
	_cd

	if _is mesa-old-clover-opencl
	then
		if ! _checksum 'old-clover'
		then
			for mesa_old_clover_opencl_deb_url in \
				$(echo "${mesa_old_clover_opencl_deb_url_list}" | grep -v '^$' )
			do
				mesa_old_clover_opencl_package_file="$(echo "${mesa_old_clover_opencl_deb_url}" | sed -e 's|.*/||g' )"

				echo "Download ${mesa_old_clover_opencl_package_file}."

				rm -f "${mesa_old_clover_opencl_package_file}"

				wget "${mesa_old_clover_opencl_deb_url}"
			done

			_checksum 'old-clover'
		fi
	fi

	if _is amdgpupro-old-orca-opencl || _is amdgpupro-pal-opencl || _is rocm-rocr-opencl || _is rocm-hip
	then
		if ! _checksum 'amdgpupro'
		then
			echo "Download ${amdgpupro_deb_file}."

			rm -f "${amdgpupro_deb_file}"

			wget "${amdgpupro_deb_repo}/${amdgpupro_deb_file}"

			_checksum 'amdgpupro'
		fi
	fi

	if _is amdgpupro-old-orca-opencl || _is amdgpupro-pal-opencl
	then
		if ! _checksum 'orca'
		then
			echo "Download ${amdgpupro_old_orca_tarball_file}."

			rm -f "${amdgpupro_old_orca_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${amdgpupro_old_orca_tarball_file}"

			_checksum 'orca'
		fi
	fi

	if _is amdgpupro-pal-opencl
	then
		if ! _checksum 'pal'
		then
			echo "Download ${amdgpupro_pal_tarball_file}."

			rm -f "${amdgpupro_pal_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${amdgpupro_pal_tarball_file}"

			_checksum 'pal'
		fi
	fi

	if _is fglrx-cpu-opencl
	then
		if ! _checksum 'fglrx'
		then
			echo "Download ${fglrx_tarball_file}."

			rm -f "${fglrx_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${fglrx_tarball_file}"

			_checksum 'fglrx'
		fi
	fi
}

_extract () {
	_cd

	_download

	if _is fglrx-cpu-opencl
	then
		if ! [ -d "${fglrx_tarball_dir}" ]
		then
			echo "Extract ${fglrx_tarball_file}."

			unzip "${fglrx_tarball_file}"
		fi
	fi

	if _is amdgpupro-old-orca-opencl || _is amdgpupro-pal-opencl
	then
		if ! [ -d "${amdgpupro_old_orca_tarball_dir}" ]
		then
			echo "Extract ${amdgpupro_old_orca_tarball_file}."

			tar --no-same-permissions -xvJf "${amdgpupro_old_orca_tarball_file}"
		fi
	fi

	if _is amdgpupro-pal-opencl
	then
		if ! [ -d "${amdgpupro_pal_tarball_dir}" ]
		then
			echo "Extract ${amdgpupro_pal_tarball_file}."

			tar --no-same-permissions -xvJf "${amdgpupro_pal_tarball_file}"
		fi
	fi
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		rm --force --verbose "${workspace_dir}/${fglrx_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${fglrx_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdgpupro_old_orca_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${amdgpupro_old_orca_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdgpupro_pal_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${amdgpupro_pal_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdgpupro_deb_file}"

		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_purge () {
	case "${1}" in
		'mesa-old-clover-opencl')
			for mesa_old_clover_opencl_deb_file in \
				$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }' | tac)
			do
				local mesa_old_clover_opencl_package_name="$(echo "${mesa_old_clover_opencl_deb_file}" | cut -f1 -d'_' )"

				apt-mark unhold "${mesa_old_clover_opencl_package_name}" || true

				apt-get remove --yes --purge "${mesa_old_clover_opencl_package_name}" || true
			done
			;;
		'mesa-all-opencl')
			for mesa_all_opencl_package_name in \
				$(echo "${mesa_all_opencl_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${mesa_all_opencl_package_name}" || true
			done
			;;
		'rocm-rocr-opencl')
			for rocm_rocr_opencl_package_name in \
				$(echo "${rocm_old_rocr_opencl_package_name_list}" "${rocm_rocr_opencl_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${rocm_rocr_opencl_package_name}" || true
			done
			;;
		'rocm-hip')
			for rocm_hip_package_name in \
				$(echo "${rocm_hip_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${rocm_hip_package_name}" || true
			done
			;;
		'amdgpupro-dkms')
			for amdgpupro_dkms_package_name in \
				$(echo "${amdgpupro_dkms_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_dkms_package_name}" || true
			done
			;;
		'amdgpupro-old-orca-opencl')
			for amdgpupro_old_orca_deb_file in \
				$(echo "${amdgpupro_old_orca_deb_file_list}" | tr ' ' '\n' | tac)
			do
				local orca_package_name="$(echo "${amdgpupro_old_orca_deb_file}" | cut -f1 -d'_')"

				apt-get remove --yes --purge "${orca_package_name}" || true
			done

			# Alternate name for opencl-orca-amdgpu-pro-icd package.
			apt-get remove --yes --purge 'opencl-legacy-amdgpu-pro-icd' || true
			;;
		'amdgpupro-orca-opencl')
			for amdgpupro_orca_opencl_package_name in \
				$(echo "${amdgpupro_orca_opencl_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_orca_opencl_package_name}" || true
			done
			;;
		'amdgpupro-pal-opencl')
			for amdgpupro_pal_deb_file in \
				$(echo "${amdgpupro_pal_deb_file_list}" | tr ' ' '\n' | tac)
			do
				local pal_package_name="$(echo "${amdgpupro_pal_deb_file}" | cut -f1 -d'_')"

				apt-get remove --yes --purge "${pal_package_name}" || true
			done
			;;
		'amdgpupro-mesa-opengl')
			for amdgpupro_mesa_opengl_package_name in \
				$(echo "${amdgpupro_mesa_opengl_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_mesa_opengl_package_name}" || true
			done
			;;
		'amdgpupro-mesa-va')
			for amdgpupro_mesa_va_package_name in \
				$(echo "${amdgpupro_mesa_va_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_mesa_va_package_name}" || true
			done
			;;
		'amdgpupro-mesa-vdpau')
			for amdgpupro_mesa_vdpau_package_name in \
				$(echo "${amdgpupro_mesa_vdpau_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_mesa_vdpau_package_name}" || true
			done
			;;
		'amdgpupro-oglp-opengl')
			for amdgpupro_oglp_opengl_package_name in \
				$(echo "${amdgpupro_oglp_opengl_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_oglp_opengl_package_name}" || true
			done
			;;
		'amdgpupro-amdgpu-vulkan')
			for amdgpupro_amdgpu_vulkan_package_name in \
				$(echo "${amdgpupro_amdgpu_vulkan_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_amdgpu_vulkan_package_name}" || true
			done
			;;
		'amdgpupro-amdgpu-pro-vulkan')
			for amdgpupro_amdgpu_pro_vulkan_package_name in \
				$(echo "${amdgpupro_amdgpu_pro_vulkan_package_name_list}" | tr ' ' '\n' | tac)
			do
				apt-get remove --yes --purge "${amdgpupro_amdgpu_pro_vulkan_package_name}" || true
			done
			;;
		'fglrx-cpu-opencl')
			rm --force --verbose \
				"${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"
			rm --force --verbose \
				"${fglrx_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

			if [ -d "${fglrx_install_dir}/x86_64-linux-gnu" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${fglrx_install_dir}/x86_64-linux-gnu"
			fi

			if [ -d "${fglrx_install_dir}" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${fglrx_install_dir}"
			fi

			rm --force --verbose \
				'/etc/ld.so.conf.d/30-amd-fglrx.conf'
			rm --force --verbose \
				'/etc/OpenCL/vendors/amdocl-fglrx64.icd'
			;;
	esac
}

_uninstall () {
	_purge mesa-old-clover-opencl
	_purge mesa-all-opencl
	_purge rocm-rocr-opencl
	_purge rocm-hip
	_purge amdgpupro-dkms
	_purge amdgpupro-old-orca-opencl
	_purge amdgpupro-orca-opencl
	_purge amdgpupro-pal-opencl
	_purge amdgpupro-mesa-opengl
	_purge amdgpupro-oglp-opengl
	_purge amdgpupro-amdgpu-vulkan
	_purge amdgpupro-amdgpu-pro-vulkan
	_purge fglrx-cpu-opencl

	dpkg-divert \
		--rename \
		--remove '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

	rm --force --verbose '/etc/OpenCL/vendors/amdocl-pal64.icd'

	if test -f '/usr/bin/amdgpu-install'
	then
		echo 'Yes' | '/usr/bin/amdgpu-install' --uninstall
	fi

	amdgpupro_package_name="$(echo "${amdgpupro_deb_file}" | cut -f1 -d'_')"
	apt-get remove --yes --purge "${amdgpupro_package_name}" || true

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}

_install () {
	_extract

	if _is rocm-rocr-opencl \
	|| _is amdgpupro-old-orca-opencl \
	|| _is amdgpupro-pal-opencl \
	|| _is amdgpupro-mesa-opencl \
	|| _is amdgpupro-mesa-va \
	|| _is amdgpupro-mesa-vdpau
	then
		apt-get update

		echo "Download gdebi-core package."
		apt-get install -y 'gdebi-core'

		echo "Install ${amdgpupro_deb_file} package."

		dpkg -i "${amdgpupro_deb_file}"

		sed -e 's/^#deb /deb /' -i '/etc/apt/sources.list.d/amdgpu-proprietary.list'
	fi

	apt-get update

	if _is mesa-old-clover-opencl
	then
		_purge mesa-all-opencl

		for mesa_old_clover_opencl_deb_file in \
			$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }')
		do
			mesa_old_clover_opencl_package_name="$(echo "${mesa_old_clover_opencl_deb_file}" | cut -f1 -d'_' )"

			echo "Install ${mesa_old_clover_opencl_package_name} package."

			gdebi --non-interactive "${mesa_old_clover_opencl_deb_file}"

			apt-mark hold "${mesa_old_clover_opencl_package_name}"
		done
	fi

	if _is mesa-all-opencl
	then
		_purge mesa-old-clover-opencl

		for mesa_all_opencl_package_name in ${mesa_all_opencl_package_name_list}
		do
			echo "Install ${mesa_all_opencl_package_name} package."

			apt-get install --yes "${mesa_all_opencl_package_name}"
		done
	fi

	if _is rocm-rocr-opencl
	then
		# Already correct (icd may be renamed):
		# /opt/rocm-4.5.1/opencl/lib/libamdocl64.so

		for rocm_rocr_opencl_package_name in ${rocm_rocr_opencl_package_name_list}
		do
			echo "Install ${rocm_rocr_opencl_package_name} package."

			apt-get install --yes "${rocm_rocr_opencl_package_name}"
		done

		# Already correct (icd may be renamed):
		# libamdocl64.so
		# /etc/OpenCL/vendors/amdocl64.icd
	fi

	if _is rocm-hip
	then
		for rocm_hip_package_name in ${rocm_hip_package_name_list}
		do
			echo "Install ${rocm_hip_package_name} package."

			apt-get install --yes "${rocm_hip_package_name}"
		done
	fi

	if _is amdgpupro-dkms
	then
		for amdgpupro_dkms_package_name in ${amdgpupro_dkms_package_name_list}
		do
			echo "Install ${amdgpupro_dkms_package_name} package."

			apt-get install --yes "${amdgpupro_dkms_package_name}"
		done
	fi

	if _is amdgpupro-old-orca-opencl
	then
		_purge amdgpupro-orca-opencl

		# Already correct:
		# /opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-orca64.so

		local amdgpupro_old_orca_deb_file
		for amdgpupro_old_orca_deb_file in ${amdgpupro_old_orca_deb_file_list}
		do
			local orca_package_name="$(echo "${amdgpupro_old_orca_deb_file}" | cut -f1 -d'_')"

			if _is amdgpupro-old-orca-opencl || [ "${orca_package_name}" != 'opencl-orca-amdgpu-pro-icd' ]
			then
				echo "Install ${amdgpupro_old_orca_deb_file} package."

				gdebi --non-interactive "${amdgpupro_old_orca_tarball_dir}/${amdgpupro_old_orca_deb_file}"
			fi

			if [ "${orca_package_name}" != 'opencl-orca-amdgpu-pro-icd' ]
			then
				apt-mark auto "${orca_package_name}"
			fi
		done

		# Already correct:
		# libamdocl-rocm64.so
		# /etc/OpenCL/vendors/amdocl-orca64.icd
	fi

	if _is amdgpupro-orca-opencl
	then
		_purge amdgpupro-old-orca-opencl

		for amdgpupro_orca_opencl_package_name in ${amdgpupro_orca_opencl_package_name_list}
		do
			echo "Install ${amdgpupro_orca_opencl_package_name} package."

			apt-get install --yes "${amdgpupro_orca_opencl_package_name}"
		done
	fi

	if _is amdgpupro-pal-opencl
	then
		dpkg-divert \
			--divert '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-pal64.so' \
			--rename '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

		local amdgpupro_pal_deb_file
		for amdgpupro_pal_deb_file in ${amdgpupro_pal_deb_file_list}
		do
			echo "Install ${amdgpupro_pal_deb_file} package."

			gdebi --non-interactive "${amdgpupro_pal_tarball_dir}/${amdgpupro_pal_deb_file}"
		done

		rm --force --verbose '/etc/OpenCL/vendors/amdocl64.icd'

		echo 'libamdocl-pal64.so' > '/etc/OpenCL/vendors/amdocl-pal64.icd'
	fi

	if _is amdgpupro-mesa-opengl
	then
		for amdgpupro_mesa_opengl_package_name in ${amdgpupro_mesa_opengl_package_name_list}
		do
			echo "Install ${amdgpupro_mesa_opengl_package_name} package."

			apt-get install --yes "${amdgpupro_mesa_opengl_package_name}"
		done
	fi

	if _is amdgpupro-mesa-va
	then
		for amdgpupro_mesa_va_package_name in ${amdgpupro_mesa_va_package_name_list}
		do
			echo "Install ${amdgpupro_mesa_va_package_name} package."

			apt-get install --yes "${amdgpupro_mesa_va_package_name}"
		done
	fi

	if _is amdgpupro-mesa-vdpau
	then
		for amdgpupro_mesa_vdpau_package_name in ${amdgpupro_mesa_vdpau_package_name_list}
		do
			echo "Install ${amdgpupro_mesa_vdpau_package_name} package."

			apt-get install --yes "${amdgpupro_mesa_vdpau_package_name}"
		done
	fi

	if _is amdgpupro-oglp-opengl
	then
		for amdgpupro_oglp_opengl_package_name in ${amdgpupro_oglp_opengl_package_name_list}
		do
			echo "Install ${amdgpupro_oglp_opengl_package_name} package."

			apt-get install --yes "${amdgpupro_oglp_opengl_package_name}"
		done
	fi

	if _is amdgpupro-amdgpu-vulkan
	then
		for amdgpupro_amdgpu_vulkan_package_name in ${amdgpupro_amdgpu_vulkan_package_name_list}
		do
			echo "Install ${amdgpupro_amdgpu_vulkan_package_name} package."

			apt-get install --yes "${amdgpupro_amdgpu_vulkan_package_name}"
		done
	fi

	if _is amdgpupro-amdgpu-vulkan
	then
		for amdgpupro_amdgpu_vulkan_package_name in ${amdgpupro_amdgpu_vulkan_package_name_list}
		do
			echo "Install ${amdgpupro_amdgpu_vulkan_package_name} package."

			apt-get install --yes "${amdgpupro_amdgpu_vulkan_package_name}"
		done
	fi

	if _is fglrx-cpu-opencl
	then
		local fglrx_extract_prefix="${fglrx_tarball_dir}/prefix"

		if ! [ -d "${fglrx_extract_prefix}" ]
		then
			"${fglrx_tarball_dir}/${fglrx_script_file}" --extract "${fglrx_extract_prefix}"
		fi

		mkdir --parents --verbose "${fglrx_install_dir}"
		mkdir --parents --verbose "${fglrx_install_dir}/x86_64-linux-gnu"

		cp --archive --verbose \
			"${fglrx_extract_prefix}/arch/x86_64/usr/lib64/libamdocl64.so" \
			"${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"

		cp --archive --verbose \
			"${fglrx_extract_prefix}/arch/x86_64/usr/lib64/libamdocl12cl64.so" \
			"${fglrx_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

		sed -e 's/libamdocl12cl64.so/libfglocl12cl64.so/g' \
			-i "${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"

		echo 'libamdocl64-fglrx.so' > '/etc/OpenCL/vendors/amdocl-fglrx64.icd'

		echo "${fglrx_install_dir}/x86_64-linux-gnu" \
			> '/etc/ld.so.conf.d/30-amd-fglrx.conf'
	fi

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}

tab=$'\t'

_mention () {
	cat <<-EOF
	This tool is provided by the I love compute! initiative.

	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	cat <<-EOF
	${script_name}: Download, install or uninstall OpenCL drivers for AMD GPUs and CPUs.

	Usage: ${script_name} [OPTION] [ACTION] [NAMES]

	Option:
	${tab}-h, --help
	${tab}${tab}Print this help.

	Actions:
	${tab}download
	${tab}${tab}Download files if needed by NAME.
	${tab}extract
	${tab}${tab}Download archives if needed by NAME.
	${tab}clean
	${tab}${tab}Clean-up download and extracted files for NAME.
	${tab}install
	${tab}${tab}Install NAME (default: clover).
	${tab}uninstall
	${tab}${tab}Uninstall all OpenCL drivers for AMD GPUs.

	Names:
	${tab}mesa-old-clover-opencl
	${tab}${tab}Mesa old Clover OpenCL for Terascale2+ and GCN+ GPUs.
	${tab}mesa-all-opencl
	${tab}${tab}Mesa Clover and RustiCL (if available) OpenCL for GCN+ GPUs.
	${tab}rocm-rocr-opencl
	${tab}${tab}AMD ROCm ROCr OpenCL for Radeon Pro GPUs.
	${tab}rocm-hip
	${tab}${tab}AMD ROCm HIP for Radeon Pro GPUs.
	${tab}amdgpupro-dkms
	${tab}${tab}AMD AMDGPU-PRO amdgpu DKMS modules and firmwares.
	${tab}amdgpupro-old-orca-opencl
	${tab}${tab}AMD AMDGPU-PRO old Orca OpenCL from AMDGPU-PRO for GCN1-3 GPUs.
	${tab}amdgpupro-orca-opencl
	${tab}${tab}AMD AMDGPU-PRO Orca OpenCL from AMDGPU-PRO for GCN5 GPUs.
	${tab}amdgpupro-pal-opencl
	${tab}${tab}AMD AMDGPU-PRO PAL OpenCL from AMDGPU-PRO for GCN4+ GPUs.
	${tab}amdgpupro-mesa-opengl
	${tab}${tab}AMD AMDGPU-PRO amdgpu Mesa OpenGL.
	${tab}amdgpupro-mesa-va
	${tab}${tab}AMD AMDGPU-PRO amdgpu Mesa VA.
	${tab}amdgpupro-mesa-vdpau
	${tab}${tab}AMD AMDGPU-PRO amdgpu Mesa VDPAU.
	${tab}amdgpupro-oglp-opengl
	${tab}${tab}AMD AMDGPU-PRO amdgpu OGLP OpenGL and OpenGL ES.
	${tab}amdgpupro-amdgpu-pro-vulkan
	${tab}${tab}AMD AMDGPU-PRO amdgpu amdgpu-pro Vulkan.
	${tab}amdgpupro-amdgpu-vulkan
	${tab}${tab}AMD AMDGPU-PRO amdgpu amdgpu Vulkan.
	${tab}fglrx-cpu-opencl
	${tab}${tab}AMD Radeon Crimson fglrx OpenCL for CPUs.

	Examples:
	${tab}${script_name} install all

	${tab}${script_name} install amdgpupro-old-orca-opencl amdgpupro-pal-opencl rocm-rocr-opencl

	${tab}${script_name} uninstall

	EOF

	_mention

	exit
}

case "${1:-}" in
	'download'|'extract'|'clean'|'install'|'uninstall')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

case "${action}" in
	'download'|'extract'|'clean'|'install')
		if [ -z "${1:-}" ]
		then
			is_mesa_old_clover_opencl='true'
		fi

		while ! [ -z "${1:-}" ]
		do
			case "${1}" in
				'mesa-all-opencl')
					is_mesa_all_opencl='true'
					;;
				'mesa-old-clover-opencl')
					is_mesa_old_clover_opencl='true'
					;;
				'rocm-rocr-opencl')
					is_rocm_rocr_opencl='true'
					;;
				'rocm-hip')
					is_rocm_hip='true'
					;;
				'amdgpupro-dkms')
					is_amdgpupro_dkms='true'
					;;
				'amdgpupro-old-orca-opencl')
					is_amdgpupro_old_orca_opencl='true'
					;;
				'amdgpupro-orca-opencl')
					is_amdgpupro_orca_opencl='true'
					;;
				'amdgpupro-pal-opencl')
					is_amdgpupro_pal_opencl='true'
					;;
				'amdgpupro-mesa-opengl')
					is_amdgpupro_mesa_opengl='true'
					;;
				'amdgpupro-mesa-va')
					is_amdgpupro_mesa_va='true'
					;;
				'amdgpupro-mesa-vdpau')
					is_amdgpupro_mesa_vdpau='true'
					;;
				'amdgpupro-oglp-opengl')
					is_amdgpupro_oglp_opengl='true'
					;;
				'amdgpupro-amdgpu-pro-vulkan')
					is_amdgpupro_amdgpu_pro_vulkan='true'
					;;
				'amdgpupro-amdgpu-pro-vulkan')
					is_amdgpupro_amdgpu_pro_vulkan='true'
					;;
				'fglrx-cpu-opencl')
					is_fglrx_cpu_opencl='true'
					;;
				*)
					_error 'Unkown name.'
					;;
			esac

			shift
		done
		;;
esac

"_${action}"

printf '\n'

_mention
