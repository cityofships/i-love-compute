#! /usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright 2022 Thomas “illwieckz“ Debesse

# This script is known to work on Ubuntu 20.04 LTS and Ubuntu 21.10.
# Clover packages installed with this script will probably not work
# with Ubuntu 22.04 LTS as required dependencies would not be available
# in repositories. Official Ubuntu Clover packages may be usable
# with radeonsi as long as -cl-fast-relaxed-math is not enabled.
# See https://github.com/llvm/llvm-project/issues/54947
# Official Ubuntu Clover packages may not be usable with r600.
# See https://github.com/llvm/llvm-project/issues/54942

# Exit in case of failure.
set -e
set -o pipefail

# Error on undefined variable.
set -u

script_dir="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
script_name="$(basename "$(realpath "${BASH_SOURCE[0]}")")"

workspace_parent_dir='workspace'
workspace_dir="${workspace_parent_dir}/${script_name}"

tarball_referer='https://www.amd.com'
tarball_repo='https://drivers.amd.com/drivers/linux'

mesa_old_clover_opencl_deb_url_list='
http://archive.ubuntu.com/ubuntu/pool/main/l/llvm-toolchain-9/libllvm9_9.0.1-12_amd64.deb
http://archive.ubuntu.com/ubuntu/pool/universe/l/llvm-toolchain-9/libclang-common-9-dev_9.0.1-12_amd64.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-dev_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-amdgcn_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/libc/libclc/libclc-r600_0.2.0+git20190827-4_all.deb
http://archive.ubuntu.com/ubuntu/pool/universe/m/mesa/mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

mesa_old_clover_opencl_deb_sum_list='
48bd8b89c9ca18b9360dbc04a65fea3d37b97664b4fc39202ff9006105f218dbab7fd7ce80c897e22c0e7b5e338317a361b54b726059ab74e6780e88c197b689  libllvm9_9.0.1-12_amd64.deb
18f5008921e7b1f52e0d91b07e170b22fca1a34899fc1d4d6e6ff8ed8f93137d88dc0aecc7631aac381e9e84f2c9bf54b2f0bdfa306d10d61f1380f42e53660f  libclang-common-9-dev_9.0.1-12_amd64.deb
800186922168ff3563a875adcd3f8084749858d64f37ffd044fbfa9f0625d466552afdbd1469f00ee6feb93b6bd33dae377c043df43d02678ae8c643f09560c5  libclc-dev_0.2.0+git20190827-4_all.deb
dc1510a5dd0cfbec431d046527dd11bcfc84c82a3fdd6d649781afb93a2af3a9dc28551a29024a5c7ae55b3457bd067481db3826cc0c931cd7f82881542d50d2  libclc-amdgcn_0.2.0+git20190827-4_all.deb
5680efd08badbbda9c7bd252890dd107fd4bf3399d0c73b5c685abd755419088a5c32d42ac419dd21f33968258937880782c1ae4129b9411b12aac9d531f85bc  libclc-r600_0.2.0+git20190827-4_all.deb
f276430f9f1d70d75692857dc7aa79365d6ef5dc1fd4ad816319e6f375e86f8eb29f49288d4f51d54da0f276712195fc217957c0e742696b338b91959bcd2e6e  mesa-opencl-icd_20.0.4-2ubuntu1_amd64.deb
'

amdgpupro_version='5.7.2'
amdgpupro_distro='jammy'
amdgpupro_deb_repo="https://repo.radeon.com/amdgpu-install/${amdgpupro_version}/ubuntu/${amdgpupro_distro}"
amdgpupro_deb_version='5.7.50702-1'
amdgpupro_deb_file="amdgpu-install_${amdgpupro_deb_version}_all.deb"
amdgpupro_deb_sum='0bcb87140c69a86470b8101dae11e1ab18357eeec6ddb87d7ba440a3bbde6dc405ace41b0bdb033ea2921531d54e36a782fe65022024491fefb9cea6f0ec8db4'

amdgpupro_old_orca_tarball_file="amdgpu-pro-21.20-1271047-ubuntu-20.04.tar.xz"
amdgpupro_old_orca_tarball_sum='530673e00c8e243e73e9322386f949c72d09c7f8f75f9760a4fad379d30a79c4562e79fc5eec9825adc1b8a396b23bda209182b7b457c2bce81c5c45500fb19b'
amdgpupro_old_orca_deb_file_list='opencl-orca-amdgpu-pro-icd_21.20-1271047_amd64.deb'
amdgpupro_old_orca_tarball_dir="$(basename "${amdgpupro_old_orca_tarball_file}" '.tar.xz')"

amdgpupro_pal_tarball_file="amdgpu-pro-20.40-1147286-ubuntu-20.04.tar.xz"
amdgpupro_pal_tarball_sum='9b064a3b02d2a1ec18fdd6c098b70f4a8c6f93e4bfdc4e9a032ca387bdf7223278622c19d5bd55e493555c5f734168c3f2768cb743f9e00dcf5f96cbc399c7b3'
amdgpupro_pal_deb_file_list='opencl-amdgpu-pro-comgr_20.40-1147286_amd64.deb opencl-amdgpu-pro-icd_20.40-1147286_amd64.deb'
amdgpupro_pal_tarball_dir="$(basename "${amdgpupro_pal_tarball_file}" '.tar.xz')"

fglrx_tarball_file="radeon-crimson-15.12-15.302-151217a-297685e.zip"
fglrx_tarball_sum='1658c3109e9dca2a1f0bd972e9042e7ccf17742e9c6110f04151334f342eb53d5a736b9cb63358a26d97562f1efb9e36c281bca85664e06f0cd11c275972f3af'
fglrx_tarball_dir='fglrx-15.302'
fglrx_script_file='amd-driver-installer-15.302-x86.x86_64.run'
fglrx_install_dir='/opt/amd-fglrx'

amdvlk_deb_repo='http://repo.radeon.com/amdvlk/apt/debian'
amdvlk_distro='bionic'
amdvlk_channel='main'
amdvlk_arch='amd64,i386'
amdvlk_key_file='amdvlk.gpg.key'
amdvlk_key_url="${amdvlk_deb_repo}/${amdvlk_key_file}"
amdvlk_key_sum='508f853506692f636380953bacd7625022bf4d536c5824383b9f7a12a61ce2877cfa923c8cadfa054795ade83580f3c5fbf50564c2aada9a23d197ecfddd6c90'
amdvlk_gpg_path='/usr/share/keyrings/amdvlk-archive-keyring.gpg'
amdvlk_list_path='/etc/apt/sources.list.d/amdvlk.list'

mesa_all_opencl_package_name_list='mesa-opencl-icd'
mesa_all_vulkan_package_name_list='mesa-vulkan-drivers'
mesa_all_opengl_package_name_list='libglx-mesa0'
mesa_all_va_package_name_list='mesa-va-drivers'
mesa_all_vdpau_package_name_list='mesa-vdpau-drivers'
rocm_old_rocr_opencl_package_name_list='ocl-icd-libopencl1-amdgpu-pro'
amdgpupro_rocr_opencl_package_name_list='rocm-opencl-runtime'
amdgpupro_rocm_hip_package_name_list='rocm-hip-runtime rocminfo'
amdgpupro_dkms_package_name_list='amdgpu-dkms'
amdgpupro_orca_opencl_package_name_list='opencl-legacy-amdgpu-pro-icd'
amdgpupro_mesa_opengl_package_name_list='libgl1-amdgpu-mesa-glx'
amdgpupro_mesa_va_package_name_list='mesa-amdgpu-va-drivers'
amdgpupro_mesa_vdpau_package_name_list='mesa-amdgpu-vdpau-drivers'
amdgpupro_oglp_opengl_package_name_list='amdgpu-pro-oglp'
amdgpupro_amdvlk_vulkan_package_name_list='vulkan-amdgpu'
amdgpupro_amdvlk_pro_vulkan_package_name_list='vulkan-amdgpu-pro'
amdvlk_vulkan_package_name_list='amdvlk'

_error () {
	printf 'ERROR: %s\n\n' "${1}" >&2

	exit 1
}

_checksum () {
	_cd

	case "${1}" in
		'old-clover')
			local IFS=$'\n'
			for package_sum_line in \
				$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$')
			do
				sum="$(echo "${package_sum_line}" | awk '{ print $1 }')"
				file="$(echo "${package_sum_line}" | awk '{ print $2 }')"

				if [ -f "${file}" ]
				then
					if printf '%s %s\n' "${sum}" "${file}" \
						| sha512sum -c '/dev/stdin'
					then
						continue
					fi
				fi

				false
				return
			done

			return
			;;
		'amdgpupro')
			sum="${amdgpupro_deb_sum}"
			file="${amdgpupro_deb_file}"
			;;
		'orca')
			sum="${amdgpupro_old_orca_tarball_sum}"
			file="${amdgpupro_old_orca_tarball_file}"
			;;
		'pal')
			sum="${amdgpupro_pal_tarball_sum}"
			file="${amdgpupro_pal_tarball_file}"
			;;
		'amdvlk')
			sum="${amdvlk_key_sum}"
			file="${amdvlk_key_file}"
			;;
		'fglrx')
			sum="${fglrx_tarball_sum}"
			file="${fglrx_tarball_file}"
			;;
	esac

	if [ -f "${file}" ]
	then
		if printf '%s %s\n' "${sum}" "${file}" \
			| sha512sum -c '/dev/stdin'
		then
			return
		fi
	fi

	false
}

_cd () {
	cd "${script_dir}"

	mkdir --parents --verbose "${workspace_dir}"

	cd "${workspace_dir}"
}

_download () {
	_cd

	if "${require_old_clover_deb}"
	then
		if ! _checksum 'old-clover'
		then
			for mesa_old_clover_opencl_deb_url in \
				$(echo "${mesa_old_clover_opencl_deb_url_list}" | grep -v '^$' )
			do
				mesa_old_clover_opencl_package_file="$(echo "${mesa_old_clover_opencl_deb_url}" | sed -e 's|.*/||g' )"

				echo "Download ${mesa_old_clover_opencl_package_file}."

				rm -f "${mesa_old_clover_opencl_package_file}"

				wget "${mesa_old_clover_opencl_deb_url}"
			done

			_checksum 'old-clover'
		fi
	fi

	if "${require_amdgpu_repo}"
	then
		if ! _checksum 'amdgpupro'
		then
			echo "Download ${amdgpupro_deb_file}."

			rm -f "${amdgpupro_deb_file}"

			wget "${amdgpupro_deb_repo}/${amdgpupro_deb_file}"

			_checksum 'amdgpupro'
		fi
	fi

	if "${require_old_orca_tarball}"
	then
		if ! _checksum 'orca'
		then
			echo "Download ${amdgpupro_old_orca_tarball_file}."

			rm -f "${amdgpupro_old_orca_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${amdgpupro_old_orca_tarball_file}"

			_checksum 'orca'
		fi
	fi

	if "${require_pal_tarball}"
	then
		if ! _checksum 'pal'
		then
			echo "Download ${amdgpupro_pal_tarball_file}."

			rm -f "${amdgpupro_pal_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${amdgpupro_pal_tarball_file}"

			_checksum 'pal'
		fi
	fi

	if "${require_amdvlk_repo}"
	then
		if ! _checksum 'amdvlk'
		then
			echo "Download ${amdvlk_key_file}."

			rm -f "${amdvlk_key_file}"

			wget "${amdvlk_key_url}"

			_checksum 'amdvlk'
		fi
	fi

	if "${require_fglrx_tarball}"
	then
		if ! _checksum 'fglrx'
		then
			echo "Download ${fglrx_tarball_file}."

			rm -f "${fglrx_tarball_file}"

			wget --header="Referer: ${tarball_referer}" \
				"${tarball_repo}/${fglrx_tarball_file}"

			_checksum 'fglrx'
		fi
	fi
}

_extract () {
	_cd

	_download

	if "${require_fglrx_tarball}"
	then
		if ! [ -d "${fglrx_tarball_dir}" ]
		then
			echo "Extract ${fglrx_tarball_file}."

			unzip "${fglrx_tarball_file}"
		fi
	fi

	if "${require_old_orca_tarball}"
	then
		if ! [ -d "${amdgpupro_old_orca_tarball_dir}" ]
		then
			echo "Extract ${amdgpupro_old_orca_tarball_file}."

			tar --no-same-permissions -xvJf "${amdgpupro_old_orca_tarball_file}"
		fi
	fi

	if "${require_pal_tarball}"
	then
		if ! [ -d "${amdgpupro_pal_tarball_dir}" ]
		then
			echo "Extract ${amdgpupro_pal_tarball_file}."

			tar --no-same-permissions -xvJf "${amdgpupro_pal_tarball_file}"
		fi
	fi
}

_clean () {
	cd "${script_dir}"

	if [ -d "${workspace_dir}" ]
	then
		rm --force --verbose "${workspace_dir}/${amdgpupro_deb_file}"
		rm --force --verbose "${workspace_dir}/${amdgpupro_old_orca_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${amdgpupro_old_orca_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdgpupro_pal_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${amdgpupro_pal_tarball_dir}"

		rm --force --verbose "${workspace_dir}/${amdvlk_key_file}"

		rm --force --verbose "${workspace_dir}/${fglrx_tarball_file}"
		rm --force --recursive --verbose "${workspace_dir}/${fglrx_tarball_dir}"

		rmdir --verbose "${workspace_dir}"
	fi

	if [ -d "${workspace_parent_dir}" ]
	then
		rmdir --ignore-fail-on-non-empty --verbose "${workspace_parent_dir}"
	fi
}

_unhold_packages () {
	local package_name
	for package_name in $(echo "${@}" | tr ' ' '\n' | tac)
	do
		# if package_name is in fact a deb file
		case "${package_name}" in
			*'.deb')
				package_name="$(echo "${package_name}" | cut -f1 -d'_')"
				;;
		esac

		echo "Unhold ${package_name} package."

		apt-mark unhold "${package_name}" || true
	done
}

_uninstall_packages () {
	local package_name
	for package_name in $(echo "${@}" | tr ' ' '\n' | tac)
	do
		# if package_name is in fact a deb file
		case "${package_name}" in
			*'.deb')
				package_name="$(echo "${package_name}" | cut -f1 -d'_')"
				;;
		esac

		echo "Uninstall ${package_name} package."

		apt-get remove --yes --purge "${package_name}" || true
	done
}

_uninstall_driver () {
	case "${1}" in
		'mesa-old-clover-opencl')
			local mesa_old_clover_opencl_deb_file
			for mesa_old_clover_opencl_deb_file in \
				$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }' | tac)
			do
				_unhold_packages "${mesa_old_clover_opencl_deb_file}"
				_uninstall_packages "${mesa_old_clover_opencl_deb_file}"
			done
			;;
		'mesa-all-opencl')
			_uninstall_packages "${mesa_all_opencl_package_name_list}"
			;;
		'mesa-all-vulkan')
			_uninstall_packages "${mesa_all_vulkan_package_name_list}"
			;;
		'mesa-all-opengl')
			_uninstall_packages "${mesa_all_opengl_package_name_list}"
			;;
		'mesa-all-va')
			_uninstall_packages "${mesa_all_va_package_name_list}"
			;;
		'mesa-all-driver')
			_uninstall_packages "${mesa_all_driver_package_name_list}"
			;;
		'amdgpupro-all')
			# Virtual keyword to uninstall all amdgpu/rocm packages since
			# they can't be uninstalled separately in an easy way.
			_uninstall_driver amdgpupro-dkms
			_uninstall_driver amdgpupro-rocr-opencl
			_uninstall_driver amdgpupro-rocm-hip
			_uninstall_driver amdgpupro-old-orca-opencl
			_uninstall_driver amdgpupro-orca-opencl
			_uninstall_driver amdgpupro-pal-opencl
			_uninstall_driver amdgpupro-mesa-opengl
			_uninstall_driver amdgpupro-oglp-opengl
			_uninstall_driver amdgpupro-amdvlk-vulkan
			_uninstall_driver amdgpupro-amdvlk-pro-vulkan

			if test -f '/usr/bin/amdgpu-install'
			then
				echo 'Yes' | '/usr/bin/amdgpu-install' --uninstall
			fi

			_uninstall_packages "${amdgpupro_deb_file}"

			;;
		'amdgpupro-rocr-opencl')
			_uninstall_packages "${rocm_old_rocr_opencl_package_name_list}" "${amdgpupro_rocr_opencl_package_name_list}"
			;;
		'amdgpupro-rocm-hip')
			_uninstall_packages "${amdgpupro_rocm_hip_package_name_list}"
			;;
		'amdgpupro-dkms')
			_uninstall_packages "${amdgpupro_dkms_package_name_list}"
			;;
		'amdgpupro-old-orca-opencl')
			_unhold_packages "${amdgpupro_old_orca_deb_file_list}"
			_uninstall_packages "${amdgpupro_old_orca_deb_file_list}" 

			# Alternate name for opencl-orca-amdgpu-pro-icd package.
			_unhold_packages 'opencl-legacy-amdgpu-pro-icd'
			_uninstall_packages 'opencl-legacy-amdgpu-pro-icd'
			;;
		'amdgpupro-orca-opencl')
			_uninstall_packages "${amdgpupro_orca_opencl_package_name_list}"
			;;
		'amdgpupro-pal-opencl')
			_uninstall_packages "${amdgpupro_pal_deb_file_list}"

			dpkg-divert \
				--rename \
				--remove '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

			rm --force --verbose '/etc/OpenCL/vendors/amdocl-pal64.icd'
			;;
		'amdgpupro-mesa-opengl')
			_uninstall_packages "${amdgpupro_mesa_opengl_package_name_list}"
			;;
		'amdgpupro-mesa-va')
			_uninstall_packages "${amdgpupro_mesa_va_package_name_list}"
			;;
		'amdgpupro-mesa-vdpau')
			_uninstall_packages "${amdgpupro_mesa_vdpau_package_name_list}"
			;;
		'amdgpupro-oglp-opengl')
			_uninstall_packages "${amdgpupro_oglp_opengl_package_name_list}"
			;;
		'amdgpupro-amdvlk-vulkan')
			_uninstall_packages "${amdgpupro_amdvlk_vulkan_package_name_list}"
			;;
		'amdgpupro-amdvlk-pro-vulkan')
			_uninstall_packages "${amdgpupro_amdvlk_pro_vulkan_package_name_list}"
			;;
		'amdvlk-vulkan')
			_uninstall_packages "${amdvlk_vulkan_package_name_list}"

			rm --force --verbose \
				"${amdvlk_list_path}"
			rm --force --verbose \
				"${amdvlk_gpg_path}"
			;;
		'fglrx-cpu-opencl')
			rm --force --verbose \
				"${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"
			rm --force --verbose \
				"${fglrx_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

			if [ -d "${fglrx_install_dir}/x86_64-linux-gnu" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${fglrx_install_dir}/x86_64-linux-gnu"
			fi

			if [ -d "${fglrx_install_dir}" ]
			then
				rmdir --ignore-fail-on-non-empty --verbose \
					"${fglrx_install_dir}"
			fi

			rm --force --verbose \
				'/etc/ld.so.conf.d/30-amd-fglrx.conf'
			rm --force --verbose \
				'/etc/OpenCL/vendors/amdocl-fglrx64.icd'
			;;
	esac
}

_uninstall () {
	local driver_name
	for driver_name in "${driver_list[@]}"
	do
		_uninstall_driver "${driver_name}"
	done

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}

_hold_packages () {
	local package_name
	for package_name in $(echo "${@}" | tr ' ' '\n' | tac)
	do
		# if package_name is in fact a deb file
		case "${package_name}" in
			*'.deb')
				package_name="$(echo "${package_name}" | cut -f1 -d'_')"
				;;
		esac

		echo "Hold ${package_name} package."

		apt-mark hold "${package_name}" || true
	done
}

_install_packages () {
	local folder_name='.'
	case "${1}" in
		'--folder='*)
			folder_name="${1:9}"
			shift
			;;
	esac

	local package_name
	for package_name in ${@}
	do
		echo "Install $(basename "${package_name}") package."

		# if package_name is in fact a deb file
		case "${package_name}" in
			*'.deb')
				_install_gdebi_package

				gdebi --non-interactive "${folder_name}/${package_name}"
				;;
			*)
				apt-get install --yes "${package_name}"
		esac
	done
}

_install_gdebi_package () {
	if ! dpkg -l gdebi-core >/dev/null 2>&1
	then
		apt-get update

		_install_packages 'gdebi-core'
	fi
}

_install_amdgpu_package () {
	apt-get update

	_install_packages "${amdgpupro_deb_file}"

	sed -e 's/^#deb /deb /' -i '/etc/apt/sources.list.d/amdgpu-proprietary.list'
}

_install_driver () {
	case "${1}" in
		'mesa-old-clover-opencl')
			_uninstall_driver mesa-all-opencl

			for mesa_old_clover_opencl_deb_file in \
				$(echo "${mesa_old_clover_opencl_deb_sum_list}" | grep -v '^$' | awk '{ print $2 }')
			do
				_install_packages "${mesa_old_clover_opencl_deb_file}"
				_hold_packages "${mesa_old_clover_opencl_deb_file}"
			done
		;;
		'mesa-all-opencl')
			_uninstall_driver mesa-old-clover-opencl

			_install_packages "${mesa_all_opencl_package_name_list}"
		;;
		'mesa-all-vulkan')
			_install_packages "${mesa_all_vulkan_package_name_list}"
		;;
		'mesa-all-opengl')
			_install_packages "${mesa_all_opengl_package_name_list}"
		;;
		'mesa-all-va')
			_install_packages "${mesa_all_va_package_name_list}"
		;;
		'mesa-all-vdpau')
			_install_packages "${mesa_all_vdpau_package_name_list}"
		;;
		'amdgpupro-dkms')
			_install_packages "${amdgpupro_dkms_package_name_list}"
		;;
		'amdgpupro-rocr-opencl')
			# Already correct (icd may be renamed):
			# /opt/rocm-4.5.1/opencl/lib/libamdocl64.so

			_install_packages "${amdgpupro_rocr_opencl_package_name_list}"

			# Already correct (icd may be renamed):
			# libamdocl64.so
			# /etc/OpenCL/vendors/amdocl64.icd
		;;
		'amdgpupro-rocm-hip')
			_install_packages "${amdgpupro_rocm_hip_package_name_list}"
		;;
		'amdgpupro-old-orca-opencl')
			_uninstall_driver amdgpupro-orca-opencl

			# Already correct:
			# /opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-orca64.so

			_install_packages --folder="${amdgpupro_old_orca_tarball_dir}" "${amdgpupro_old_orca_deb_file_list}"
			_hold_packages "${amdgpupro_old_orca_deb_file_list}"

			# Already correct:
			# libamdocl-rocm64.so
			# /etc/OpenCL/vendors/amdocl-orca64.icd
		;;
		'amdgpupro-orca-opencl')
			_uninstall_driver amdgpupro-old-orca-opencl

			_install_packages "${amdgpupro_orca_opencl_package_name_list}"
		;;
		'amdgpupro-pal-opencl')
			dpkg-divert \
				--divert '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl-pal64.so' \
				--rename '/opt/amdgpu-pro/lib/x86_64-linux-gnu/libamdocl64.so' \

			_install_packages --folder="${amdgpupro_pal_tarball_dir}" "${amdgpupro_pal_deb_file_list}"

			rm --force --verbose '/etc/OpenCL/vendors/amdocl64.icd'

			echo 'libamdocl-pal64.so' > '/etc/OpenCL/vendors/amdocl-pal64.icd'
		;;
		'amdgpupro-mesa-opengl')
			_install_packages "${amdgpupro_mesa_opengl_package_name_list}"
		;;
		'amdgpupro-mesa-va')
			_install_packages "${amdgpupro_mesa_va_package_name_list}"
		;;
		'amdgpupro-mesa-vdpau')
			_install_packages "${amdgpupro_mesa_vdpau_package_name_list}"
		;;
		'amdgpupro-oglp-opengl')
			_install_packages "${amdgpupro_oglp_opengl_package_name_list}"
		;;
		'amdgpupro-amdvlk-vulkan')
			_install_packages "${amdgpupro_amdvlk_vulkan_package_name_list}"
		;;
		'amdgpupro-amdvlk-pro-vulkan')
			_install_packages "${amdgpupro_amdvlk_pro_vulkan_package_name_list}"
		;;
		'amdvlk-vulkan')
			_install_packages "${amdvlk_vulkan_package_name_list}"
		;;
		'fglrx-cpu-opencl')
			local fglrx_extract_prefix="${fglrx_tarball_dir}/prefix"

			if ! [ -d "${fglrx_extract_prefix}" ]
			then
				"${fglrx_tarball_dir}/${fglrx_script_file}" --extract "${fglrx_extract_prefix}"
			fi

			mkdir --parents --verbose "${fglrx_install_dir}"
			mkdir --parents --verbose "${fglrx_install_dir}/x86_64-linux-gnu"

			cp --archive --verbose \
				"${fglrx_extract_prefix}/arch/x86_64/usr/lib64/libamdocl64.so" \
				"${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"

			cp --archive --verbose \
				"${fglrx_extract_prefix}/arch/x86_64/usr/lib64/libamdocl12cl64.so" \
				"${fglrx_install_dir}/x86_64-linux-gnu/libfglocl12cl64.so"

			sed -e 's/libamdocl12cl64.so/libfglocl12cl64.so/g' \
				-i "${fglrx_install_dir}/x86_64-linux-gnu/libamdocl64-fglrx.so"

			echo 'libamdocl64-fglrx.so' > '/etc/OpenCL/vendors/amdocl-fglrx64.icd'

			echo "${fglrx_install_dir}/x86_64-linux-gnu" \
				> '/etc/ld.so.conf.d/30-amd-fglrx.conf'
		;;
	esac
}

_install () {
	_extract

	if "${require_amdgpu_repo}"
	then
		_install_amdgpu_package
	fi

	if "${require_amdvlk_repo}"
	then
		local amdvlk_source_line="deb [arch=${amdvlk_arch} signed_by=${amdvlk_gpg_path}] ${amdvlk_deb_repo} ${amdvlk_distro} ${amdvlk_channel}"
		echo "${amdvlk_source_line}" > "${amdvlk_list_path}"
		gpg --dearmor < "${amdvlk_key_file}" > "${amdvlk_gpg_path}"
	fi

	apt-get update

	local driver_name
	for driver_name in "${driver_list[@]}"
	do
		_install_driver "${driver_name}"
	done

	# Read changes from /etc/ld.so.conf.d folder.
	ldconfig
}


tab=$'\t'

_mention () {
	cat <<-EOF
	This tool is provided by the I love compute! initiative.

	Always backup this script for future uninstallation, future versions
	of this script may not uninstall what was installed with this one.

	Always uninstall before upgrading to an higher version of the
	distribution you use.

	Support the effort to keep OpenCL working on Linux, if this script saved
	your life, you can make a donation, see:

	${tab}https://gitlab.com/illwieckz/i-love-compute#funding

	EOF
}

_help () {
	sed -e 's/\\t/\t/g' <<-EOF
	${script_name}: Download, install or uninstall OpenCL drivers for AMD GPUs and CPUs.

	Usage: ${script_name} [OPTION] [ACTION] [DRIVER NAMES]

	Option:
	\t-h, --help
	\t\tPrint this help.

	Actions:
	\tdownload
	\t\tDownload files if needed by NAME.
	\textract
	\t\tDownload archives if needed by NAME.
	\tclean
	\t\tClean-up download and extracted files for NAME.
	\tinstall
	\t\tInstall NAME
	\tuninstall
	\t\tUninstall NAME

	Driver names:
	\tmesa-old-clover-opencl
	\t\tMesa old Clover OpenCL for Terascale2+ and GCN4- GPUs (only on Ubuntu 20.04)
	\tmesa-all-opencl
	\t\tMesa Clover OpenCL for Terascale2+ and GCN4- and (if available) RustiCL OpenCL for GCN and RDNA GPUs.
	\tmesa-all-vulkan
	\t\tMesa RADV Vulkan for GCN and RDNA GPUs.
	\tmesa-all-opengl
	\t\tMesa radeon and radeonsi OpenGL for TeraScale, GCN and RDNA GPUs.
	\tmesa-all-va
	\t\tMesa radeon and radeonsi VA for TeraScale, GCN and RDNA GPUs.
	\tmesa-all-vdpau
	\t\tMesa radeon and radeonsi VDPAU for TeraScale, GCN and RDNA GPUs.
	\tamdgpupro-dkms
	\t\tAMD AMDGPU-PRO amdgpu DKMS modules and firmwares for GCN and RDNA GPUs.
	\tamdgpupro-rocr-opencl
	\t\tAMD AMDGPU-PRO ROCr OpenCL for Radeon Pro GPUs.
	\tamdgpupro-rocm-hip
	\t\tAMD AMDGPU-PRO ROCm HIP for Radeon Pro GPUs.
	\tamdgpupro-old-orca-opencl
	\t\tAMD AMDGPU-PRO old Orca OpenCL for GCN3- GPUs.
	\tamdgpupro-orca-opencl
	\t\tAMD AMDGPU-PRO Orca OpenCL for GCN5 GPUs.
	\tamdgpupro-pal-opencl
	\t\tAMD AMDGPU-PRO PAL OpenCL for GCN4+ GPUs.
	\tamdgpupro-mesa-opengl
	\t\tAMD AMDGPU-PRO amdgpu Mesa OpenGL for GCN and RDNA GPUs.
	\tamdgpupro-mesa-va
	\t\tAMD AMDGPU-PRO amdgpu Mesa VA for GCN and RDNA GPUs.
	\tamdgpupro-mesa-vdpau
	\t\tAMD AMDGPU-PRO amdgpu Mesa VDPAU for GCN and RDNA GPUs.
	\tamdgpupro-oglp-opengl
	\t\tAMD AMDGPU-PRO amdgpu OGLP OpenGL and OpenGL ES for GCN and RDNA GPUs.
	\tamdgpupro-amdvlk-pro-vulkan
	\t\tAMD AMDGPU-PRO amdgpu amdgpu-pro Vulkan for GCN and RDNA GPUs.
	\tamdgpupro-amdvlk-vulkan
	\t\tAMD AMDGPU-PRO amdgpu amdgpu Vulkan for GCN and RDNA GPUs.
	\tamdvlk-vulkan
	\t\tAMD amdvlk Vulkan for GCN GCN3+ and RDNA GPUs.
	\tfglrx-cpu-opencl
	\t\tAMD Radeon Crimson fglrx OpenCL for CPUs.

	ROCM/AMDGPU-PRO drivers can't be uninstalled separately,
	the “amdgpupro-all” virtual driver name uninstalls all of them.

	Examples:
	\t${script_name} install all

	\t${script_name} install amdgpupro-old-orca-opencl amdgpupro-pal-opencl amdgpupro-rocr-opencl

	\t${script_name} uninstall amdvlk-vulkan

	\t${script_name} uninstall amdgpupro-all

	EOF

	_mention

	exit
}

case "${1:-}" in
	'download'|'extract'|'clean'|'install'|'uninstall')
		action="${1}"
		;;
	'-h'|'--help'|'')
		_help
		;;
	'-'*|'--'*)
		_error 'Unknown option.'
		;;
	*)
		_error 'Unknown action.'
		;;
esac

shift

require_old_clover_deb='false'
require_old_orca_tarball='false'
require_pal_tarball='false'
require_amdgpu_repo='false'
require_amdvlk_repo='false'
require_fglrx_tarball='false'

declare -a driver_list=()

case "${action}" in
	'download'|'extract'|'install')
		while ! [ -z "${1:-}" ]
		do
			case "${1}" in
				'mesa-old-clover-opencl')
					require_old_clover_deb='true'
					;;
				'rocm-'*)
					require_amdgpu_repo='true'
					;;
				'amdgpupro-old-orca-opencl')
					require_old_orca_tarball='true'
					;;
				'amdgpupro-pal-opencl')
					require_pal_tarball='true'
					;;
				'amdgpupro-'*)
					require_amdgpu_repo='true'
					;;
				'amdvlk-'*)
					require_amdvlk_repo='true'
					;;
				'fglrx-'*)
					require_fglrx_tarball='true'
					;;
			esac

			case "${1}" in
				'mesa-old-clover-opencl')
					;;
				'mesa-all-opencl')
					;;
				'mesa-all-vulkan')
					;;
				'mesa-all-opengl')
					;;
				'mesa-all-va')
					;;
				'mesa-all-vdpau')
					;;
				'amdgpupro-dkms')
					;;
				'amdgpupro-rocr-opencl')
					;;
				'amdgpupro-rocm-hip')
					;;
				'amdgpupro-old-orca-opencl')
					;;
				'amdgpupro-orca-opencl')
					;;
				'amdgpupro-pal-opencl')
					;;
				'amdgpupro-mesa-opengl')
					;;
				'amdgpupro-mesa-va')
					;;
				'amdgpupro-mesa-vdpau')
					;;
				'amdgpupro-oglp-opengl')
					;;
				'amdgpupro-amdvlk-vulkan')
					;;
				'amdgpupro-amdvlk-pro-vulkan')
					;;
				'amdvlk-vulkan')
					;;
				'fglrx-cpu-opencl')
					;;
				*)
					_error "Unknown driver ${1}."
					;;
			esac

			driver_list+=("${1}")

			shift
		done
		;;
esac

case "${action}" in
	'uninstall')
		while ! [ -z "${1:-}" ]
		do
			case "${1}" in
				'mesa-old-clover-opencl')
					;;
				'mesa-all-opencl')
					;;
				'mesa-all-vulkan')
					;;
				'mesa-all-opengl')
					;;
				'mesa-all-va')
					;;
				'mesa-all-vdpau')
					;;
				'amdgpupro-all')
					;;
				'amdvlk-vulkan')
					;;
				'fglrx-cpu-opencl')
					;;
				'amdgpupro-all')
					;;
				*)
					_error "Unknown driver ${1} (note: all amdgpu/rocm drivers are uninstalled with a single “amdgpupro-all” keyword)."
					;;
			esac

			driver_list+=("${1}")

			shift
		done
esac

case "${action}" in
	'download'|'extract'|'install'|'uninstall')
		if [ "${#driver_list[@]}" = '0' ]
		then
			_error 'Missing driver name.'
		fi
	;;
esac

"_${action}"

printf '\n'

_mention
